

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (2 November 2023 19:02:03) as /home/clinux01/Descargas/linux64/linux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/Descargas/linux64/linux64/TusLibros.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'us 11/2/2023 19:03:21'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'us 11/2/2023 19:12:22'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'us 11/2/2023 19:12:17'!
test01CashierCannotCheckoutAnEmptyCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			self assert: ( 0 equals: cashier amountDebited: cart) ]
	
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'us 11/2/2023 19:19:20'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'us 11/2/2023 19:19:26'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'us 11/2/2023 19:19:35'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'us 11/2/2023 19:19:40'!
itemSellByTheStore
	
	^ 'validBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'us 11/2/2023 19:19:53' prior: 50650521!
test01CashierCannotCheckoutAnEmptyCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.]
	
	
! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:19:56'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:20:08'!
checkout: cart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:20:46' prior: 50650569!
checkout: aCartToCheckout 
	
	^self error: self class cannotCheckoutEmptyCartError! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:20:52'!
ERROR!
!Cashier class methodsFor: 'error' stamp: 'us 11/2/2023 19:21:00'!
cannotCheckoutEmptyCartError
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error' stamp: 'us 11/2/2023 19:21:22' prior: 50650581!
cannotCheckoutEmptyCartError
	
	^'A cashier cannot checkout an empty cart'! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:21:24'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:21:24'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'us 11/2/2023 19:25:19'!
test02CashierCanCheckoutAOneElementCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout: cart)  
	
! !
!Cart methodsFor: 'queries' stamp: 'us 11/2/2023 19:26:04'!
items

	^items copy ! !
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:26:45' prior: 50650573!
checkout: aCartToCheckout 
	
	(aCartToCheckout items) isEmpty ifTrue: [^self error: self class cannotCheckoutEmptyCartError].
	^100 * peso! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:26:47'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneElementCart stamp: 'us 11/2/2023 19:26:47'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneElementCart stamp: 'us 11/2/2023 19:26:47'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:26:57' prior: 50650611!
checkout: aCartToCheckout 
	
	(aCartToCheckout items) isEmpty ifTrue: [^self error: self class cannotCheckoutEmptyCartError].
	^1000 * peso! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:26:59'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneElementCart stamp: 'us 11/2/2023 19:26:59'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:28:46' prior: 50650628!
checkout: aCartToCheckout 
	
	self assertNonEmptyCart.
	^1000 * peso! !
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:29:15' prior: 50650642!
checkout: aCartToCheckout 
	
	self assertNonEmptyCart: aCartToCheckout.
	^1000 * peso! !
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:29:31'!
assertNonEmptyCart: aCartToCheckout 
	
	(aCartToCheckout items) isEmpty ifTrue: [^self error: self class cannotCheckoutEmptyCartError].	
	

! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:29:48'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneElementCart stamp: 'us 11/2/2023 19:29:48'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'us 11/2/2023 19:32:49'!
test03CashierCanCheckoutAMultipleItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart)  
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'us 11/2/2023 19:33:07'!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout: cart)  
	
! !

!methodRemoval: CashierTest #test02CashierCanCheckoutAOneElementCart stamp: 'us 11/2/2023 19:33:07'!
test02CashierCanCheckoutAOneElementCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout: cart)  
	
!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleItemsCart stamp: 'us 11/2/2023 19:33:09'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleItemsCart stamp: 'us 11/2/2023 19:33:09'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:33:37' prior: 50650647!
checkout: aCartToCheckout 
	
	self assertNonEmptyCart: aCartToCheckout.
	self amountDebitedFrom: aCartToCheckout.! !
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:36:05'!
amountDebitedFrom: aCartToCheckout

	^(aCartToCheckout items) size * 1000! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:36:06'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:36:06'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleItemsCart stamp: 'us 11/2/2023 19:36:06'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:36:11'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:36:11'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:37:01' prior: 50650710!
amountDebitedFrom: aCartToCheckout

	(aCartToCheckout items) size * 1000! !
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:37:05' prior: 50650732!
amountDebitedFrom: aCartToCheckout

	^(aCartToCheckout items) size * 1000! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:37:07'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:37:07'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleItemsCart stamp: 'us 11/2/2023 19:37:07'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:37:09'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:37:09'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:37:16' prior: 50650704!
checkout: aCartToCheckout 
	
	self assertNonEmptyCart: aCartToCheckout.
	^self amountDebitedFrom: aCartToCheckout.! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:37:17'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:37:17'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleItemsCart stamp: 'us 11/2/2023 19:37:17'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:37:22'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:37:22'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:37:34' prior: 50650737!
amountDebitedFrom: aCartToCheckout

	^(aCartToCheckout items) size * 1000 * peso! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:37:36'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:37:36'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleItemsCart stamp: 'us 11/2/2023 19:37:36'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:37:52'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:37:52'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleItemsCart stamp: 'us 11/2/2023 19:37:52'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:46:17'!
test04CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart with: creditCard)
	
! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:46:32'!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart)  
	
! !

!methodRemoval: CashierTest #test03CashierCanCheckoutAMultipleItemsCart stamp: 'us 11/2/2023 19:46:32'!
test03CashierCanCheckoutAMultipleItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart)  
	
!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:46:50'!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:46:53'!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart with: creditCard)
	
! !

!methodRemoval: CashierTest #test04CashierCannotCheckoutWithAExpiredCard stamp: 'us 11/2/2023 19:46:53'!
test04CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart with: creditCard)
	
!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:47:05'!
itemSellByTheStore2
	
	^ 'validBook2'! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:47:08'!
itemSellByTheStore3
	
	^ 'validBook3'! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:48:08' prior: 50650839!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOccurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout: cart)  
	
! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 19:48:10'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:50:10' prior: 50650540!
defaultCatalog
	
	|array|
	
	array :=  Array with: self itemSellByTheStore.
	array add: self itemSellByTheStore2.
	array add: self itemSellByTheStore3! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:50:13'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:50:13'!
ERROR!

Array!

Array!

Array!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:51:12' prior: 50650897!
defaultCatalog
	
	|array|
	
	array :=  Bag new.
	array add: self  itemSellByTheStore.
	array add: self itemSellByTheStore2.
	array add: self itemSellByTheStore3! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:51:13'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:51:14'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:51:14'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:52:16' prior: 50650912!
defaultCatalog
	
	|array|
	
	array :=  OrderedCollection new.
	array add: self  itemSellByTheStore.
	array add: self itemSellByTheStore2.
	array add: self itemSellByTheStore3! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:52:17'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:52:18'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:52:18'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:52:38' prior: 50650930!
defaultCatalog
	
	|catalog|
	
	catalog :=  OrderedCollection new.
	catalog add: self  itemSellByTheStore.
	catalog add: self itemSellByTheStore2.
	catalog add: self itemSellByTheStore3! !

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 19:54:05'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 19:54:05'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:55:56'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:56:40' prior: 50650948!
defaultCatalog
	
	|catalog|
	
	catalog :=  OrderedCollection new.
	catalog add: self  itemSellByTheStore.
	catalog add: self itemSellByTheStore2.
	catalog add: self itemSellByTheStore3.
	
	^catalog! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:56:42'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 19:56:43'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 19:56:44'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 19:56:44'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 19:57:03'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 19:57:13'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 19:57:13'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:58:22' prior: 50650880!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout: cart)  
	
! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 19:58:23'!
FAILURE!

Dictionary with: 1->2!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:02:06' prior: 50650967!
defaultCatalog
	
	|catalog|
	
	catalog :=  Dictionary new.
	catalog add: self  itemSellByTheStore.
	catalog add: self itemSellByTheStore2.
	catalog add: self itemSellByTheStore3.
	
	^catalog! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:02:23' prior: 50650549!
itemSellByTheStore
	
	^ 'validBook' -> 1000 * peso! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:02:33' prior: 50650872!
itemSellByTheStore2
	
	^ 'validBook2' -> 200 * peso! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:02:40' prior: 50650876!
itemSellByTheStore3
	
	^ 'validBook3' -> 300 * peso! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:03:04'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:03:04'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:03:19' prior: 50651028!
itemSellByTheStore
	
	^ 'validBook' -> (1000 * peso)! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:03:21'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:03:21'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:05:31' prior: 50651019!
defaultCatalog
	
	|catalog|
	
	catalog :=  Dictionary with: (self  itemSellByTheStore) -> 1000 * peso
			   with: (self itemSellByTheStore2) -> 200 * peso
			   with: (self itemSellByTheStore3) -> 300 * peso.
	
	^catalog! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:05:43'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:05:43'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:05:56' prior: 50651060!
defaultCatalog
	
	|catalog|
	
	catalog :=  Dictionary with: (self  itemSellByTheStore) -> 1000
			   with: (self itemSellByTheStore2) -> 200
			   with: (self itemSellByTheStore3) -> 300.
	
	^catalog! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:05:58'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:05:58'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:06:07' prior: 50651049!
itemSellByTheStore
	
	^ 'validBook'! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:06:10' prior: 50651033!
itemSellByTheStore2
	
	^ 'validBook2'! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:06:12' prior: 50651038!
itemSellByTheStore3
	
	^ 'validBook3'! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:06:14'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:06:17'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:06:18'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:06:18'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:07:02' prior: 50650677!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: (self itemSellByTheStore) -> 1000.
	
	self assert: (1000 * peso) equals: (cashier checkout: cart)  
	
! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:07:03'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:56:40' prior: 50651076!
defaultCatalog
	
	|catalog|
	
	catalog :=  OrderedCollection new.
	catalog add: self  itemSellByTheStore.
	catalog add: self itemSellByTheStore2.
	catalog add: self itemSellByTheStore3.
	
	^catalog! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:08:35'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:08:36'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:08:36'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:08:43' prior: 50651117!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout: cart)  
	
! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:08:44'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 20:08:45'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:09:18' prior: 50651001!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier withCatalogue: self catalogueForCashier.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout: cart)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:10:10'!
catalogForCashier
	
	|catalog|
	
	catalog :=  Dictionary new.
	Dictionary with: (self  itemSellByTheStore) -> 1000
			   with: (self itemSellByTheStore2) -> 200
			   with: (self itemSellByTheStore3) -> 300.
	
	^catalog! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:10:23'!
catalogueForCashier
	
	|catalog|
	
	catalog :=  Dictionary new.
	Dictionary with: (self  itemSellByTheStore) -> 1000
			   with: (self itemSellByTheStore2) -> 200
			   with: (self itemSellByTheStore3) -> 300.
	
	^catalog! !

!methodRemoval: CashierTest #catalogForCashier stamp: 'us 11/2/2023 20:10:23'!
catalogForCashier
	
	|catalog|
	
	catalog :=  Dictionary new.
	Dictionary with: (self  itemSellByTheStore) -> 1000
			   with: (self itemSellByTheStore2) -> 200
			   with: (self itemSellByTheStore3) -> 300.
	
	^catalog!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:10:31'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'us 11/2/2023 20:10:35'!
withCatalogue: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalogue: aRenameMe1 ! !
!Cashier class methodsFor: 'instance creation' stamp: 'us 11/2/2023 20:10:47' prior: 50651212!
withCatalogue: aCatalogue 

	^self new initializeWithCatalogue: aCatalogue ! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:10:50'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'us 11/2/2023 20:10:56'!
Object subclass: #Cashier
	instanceVariableNames: 'catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'us 11/2/2023 20:10:56'!
initializeWithCatalogue: aCatalogue 
	self shouldBeImplemented.
	catalogue := aCatalogue.! !
!Cashier methodsFor: 'initialization' stamp: 'us 11/2/2023 20:10:59' prior: 50651236!
initializeWithCatalogue: aCatalogue 

	catalogue := aCatalogue.! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:11:26'!
FAILURE!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:11:26'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 20:12:38' prior: 50650782!
amountDebitedFrom: aCartToCheckout

	^catalogue sum: [ :anItem | anItem value]! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:12:41'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:12:41'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:14:16' prior: 50651189!
catalogueForCashier
	
	
	^Dictionary with: (self  itemSellByTheStore) -> 1000
			      with: (self itemSellByTheStore2) -> 200
			      with: (self itemSellByTheStore3) -> 300.
	! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:14:25'!
FAILURE!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:14:25'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 20:14:35'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 20:14:35'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:14:40'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:14:42'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:14:42'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:14:53' prior: 50651149!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier withCatalogue: self catalogueForCashier.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout: cart)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:15:01' prior: 50650818!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier withCatalogue: self catalogueForCashier.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart)  
	
! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:15:06'!
FAILURE!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:15:06'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:15:08'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:15:08'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:15:31'!
FAILURE!

----SNAPSHOT----(2 November 2023 20:16:51) CuisUniversity-5981.image priorSource: 10197292!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 20:20:16' prior: 50651254!
amountDebitedFrom: aCartToCheckout

	^(aCartToCheckout items) sum: [ :anItem | catalogue at: anItem]! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:20:21'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:20:21'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 20:20:33' prior: 50651343!
amountDebitedFrom: aCartToCheckout

	^(aCartToCheckout items) sum: [ :anItem | catalogue at: anItem] * peso! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:20:36'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:20:36'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 20:20:48' prior: 50651356!
amountDebitedFrom: aCartToCheckout

	^((aCartToCheckout items) sum: [ :anItem | catalogue at: anItem]) * peso! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:20:49'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:20:50'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:20:50'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 20:20:50'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:20:50'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'us 11/2/2023 20:20:50'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'us 11/2/2023 20:20:50'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:20:57'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 20:20:58'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:20:59'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:29:16' prior: 50650554!
test01CashierCannotCheckoutAnEmptyCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !

Month!

Month new!

Month!

self value!

November of: 2020!

November of: 2020!

GregorianMonthOfYear !

GregorianMonthOfYear new!

GregorianMonthOfYear year: 2028 month: 10!

GregorianMonthOfYear year: 2028 month: October.!

monthOfYear := GregorianMonthOfYear year: 2028 month: October.!

monthOfYear isValid!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'us 11/2/2023 20:49:54'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:47:57' prior: 50650849!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard expiryMonthOfYear|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2028 month: October.
	
	creditCard :=  CreditCard number: '231311' for: 'Pepe' expiring: expiryMonthOfYear.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart from: creditCard)
	
! !

GregorianDate!

GregorianDate today!

Date class today!

Date today!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:56:23' prior: 50651439!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard expiryMonthOfYear|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2028 month: October.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart from: creditCard)
	
! !

----SNAPSHOT----(2 November 2023 21:15:33) CuisUniversity-5981.image priorSource: 10230043!

----SNAPSHOT----(2 November 2023 21:21:42) CuisUniversity-5981.image priorSource: 10234336!

----STARTUP---- (2 November 2023 21:27:31) as C:\Users\usuario\Desktop\URI\INGE I\TDD\cuis\windows64\CuisUniversity-5981.image!


!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/2/2023 21:31:30'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/2/2023 21:31:34'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/2/2023 21:32:37'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/2/2023 21:33:42'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/2/2023 21:33:44'!
PASSED!
!CartTest methodsFor: 'support' stamp: 'UNS 11/3/2023 19:39:52' prior: 50650413!
defaultCatalog
		
	^Dictionary with: (self  itemSellByTheStore) -> 1000
			      with: (self itemSellByTheStore2) -> 200
			      with: (self itemSellByTheStore3) -> 300.
	! !
!CartTest methodsFor: 'support' stamp: 'UNS 11/3/2023 19:40:03'!
itemSellByTheStore2
	
	^ 'validBook2'! !
!CartTest methodsFor: 'support' stamp: 'UNS 11/3/2023 19:40:07'!
itemSellByTheStore3
	
	^ 'validBook3'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UNS 11/3/2023 19:47:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UNS 11/3/2023 19:47:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UNS 11/3/2023 19:47:48'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UNS 11/3/2023 19:47:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UNS 11/3/2023 19:47:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UNS 11/3/2023 19:47:48'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UNS 11/3/2023 19:47:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UNS 11/3/2023 19:47:48'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UNS 11/3/2023 19:47:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UNS 11/3/2023 19:48:01'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UNS 11/3/2023 19:48:01'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UNS 11/3/2023 19:48:08'!
ERROR!

self!

catalog!

catalog!
!Cart methodsFor: 'assertions' stamp: 'UNS 11/3/2023 19:51:44' prior: 50650447!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UNS 11/3/2023 19:51:47'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UNS 11/3/2023 19:51:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UNS 11/3/2023 19:51:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UNS 11/3/2023 19:51:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UNS 11/3/2023 19:51:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UNS 11/3/2023 19:51:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UNS 11/3/2023 19:51:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UNS 11/3/2023 19:51:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UNS 11/3/2023 19:51:51'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/3/2023 19:52:01'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 19:52:01'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/3/2023 19:52:01'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/3/2023 19:52:01'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/3/2023 19:52:01'!
ERROR!

!methodRemoval: CashierTest #catalogueForCashier stamp: 'UNS 11/3/2023 19:52:10'!
catalogueForCashier
	
	
	^Dictionary with: (self  itemSellByTheStore) -> 1000
			      with: (self itemSellByTheStore2) -> 200
			      with: (self itemSellByTheStore3) -> 300.
	!

!methodRemoval: CashierTest #defaultCatalog stamp: 'UNS 11/3/2023 19:52:15'!
defaultCatalog
	
	|catalog|
	
	catalog :=  OrderedCollection new.
	catalog add: self  itemSellByTheStore.
	catalog add: self itemSellByTheStore2.
	catalog add: self itemSellByTheStore3.
	
	^catalog!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 19:52:35'!
defaultCatalog
		
	^Dictionary with: (self  itemSellByTheStore) -> 1000
			      with: (self itemSellByTheStore2) -> 200
			      with: (self itemSellByTheStore3) -> 300.
	! !

Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'UNS 11/3/2023 19:52:53'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: Cashier #initializeWithCatalogue: stamp: 'UNS 11/3/2023 19:53:01'!
initializeWithCatalogue: aCatalogue 

	catalogue := aCatalogue.!

!methodRemoval: Cashier class #withCatalogue: stamp: 'UNS 11/3/2023 19:53:09'!
withCatalogue: aCatalogue 

	^self new initializeWithCatalogue: aCatalogue !
!Cart methodsFor: 'queries' stamp: 'UNS 11/3/2023 20:00:41'!
amountToDebit

	^items sum: [ :anItem | self priceOf: anItem]! !
!Cart methodsFor: 'queries' stamp: 'UNS 11/3/2023 20:00:47' prior: 50651654!
amountToDebit

	^items sum: [ :anItem | self priceOf: anItem]! !
!Cart methodsFor: 'queries' stamp: 'UNS 11/3/2023 20:01:10'!
priceOf: anItem

	^catalog at: anItem! !
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:05:55' prior: 50651369!
amountDebitedFrom: aCartToCheckout

	^aCartToCheckout amountToDebit! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:06:16' prior: 50651300!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout: cart)  
	
! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 20:06:20'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 20:06:20'!
FAILURE!
!Cart methodsFor: 'queries' stamp: 'UNS 11/3/2023 20:06:51' prior: 50651663!
priceOf: anItem

	^(catalog at: anItem) * peso! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 20:06:53'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/3/2023 20:06:53'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 20:06:53'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/3/2023 20:06:53'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/3/2023 20:06:53'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/3/2023 20:06:53'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 20:06:56'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:07:02' prior: 50651311!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:07:06' prior: 50651166!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout: cart)  
	
! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 20:07:10'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/3/2023 20:07:10'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/3/2023 20:07:12'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:09:27' prior: 50651409!
test01CashierCannotCheckoutAnEmptyCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier for: cart.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !
!Cashier class methodsFor: 'instance creation' stamp: 'UNS 11/3/2023 20:09:59'!
for: aCart

	^self new initializeWith: aCart! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'UNS 11/3/2023 20:10:34'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'UNS 11/3/2023 20:10:14'!
initializeWith: aCart

	cart := aCart! !
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:10:50'!
checkout
	
	self assertNonEmptyCart.
	^self amountDebitedFrom.! !
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:11:53'!
assertNonEmptyCart 
	
	(cart items) isEmpty ifTrue: [^self error: self class cannotCheckoutEmptyCartError].	
	

! !

!methodRemoval: Cashier #assertNonEmptyCart: stamp: 'UNS 11/3/2023 20:11:57'!
assertNonEmptyCart: aCartToCheckout 
	
	(aCartToCheckout items) isEmpty ifTrue: [^self error: self class cannotCheckoutEmptyCartError].	
	

!
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:12:26'!
amountDebitedFrom

	^cart amountToDebit! !

!methodRemoval: Cashier #amountDebitedFrom: stamp: 'UNS 11/3/2023 20:12:30'!
amountDebitedFrom: aCartToCheckout

	^aCartToCheckout amountToDebit!

!methodRemoval: Cashier #checkout: stamp: 'UNS 11/3/2023 20:12:33'!
checkout: aCartToCheckout 
	
	self assertNonEmptyCart: aCartToCheckout.
	^self amountDebitedFrom: aCartToCheckout.!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/3/2023 20:12:42'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:13:38' prior: 50651672!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier for: cart.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 20:13:39'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:13:49' prior: 50651716!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier for:cart.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)  
	
! !

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/3/2023 20:13:50'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:13:56' prior: 50651727!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier for: cart.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout)  
	
! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/3/2023 20:13:58'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:14:41' prior: 50651785!
assertNonEmptyCart 
	
	cart isEmpty ifTrue: [^self error: self class cannotCheckoutEmptyCartError].	
	

! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/3/2023 20:14:43'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 20:14:44'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/3/2023 20:14:46'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/3/2023 20:14:47'!
PASSED!
!CreditCard class methodsFor: 'nil' stamp: 'UNS 11/3/2023 20:16:14'!
expiring: anExpirationMonthOfYear

	^self new initializeCardExpiring: anExpirationMonthOfYear! !
!CreditCard methodsFor: 'nil' stamp: 'UNS 11/3/2023 20:17:35'!
initializeCardExpiring: anExpirationMonthOfYear

	| expiration |
	expiration	 := anExpirationMonthOfYear! !

!methodRemoval: CreditCard #initializeCardExpiring: stamp: 'UNS 11/3/2023 20:18:10'!
initializeCardExpiring: anExpirationMonthOfYear

	| expiration |
	expiration	 := anExpirationMonthOfYear!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'UNS 11/3/2023 20:18:20'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'nil' stamp: 'UNS 11/3/2023 20:18:18'!
initializeCardExpiring: anExpirationMonthOfYear
	
	expiration := anExpirationMonthOfYear! !

----SNAPSHOT----(3 November 2023 20:19:03) CuisUniversity-5981.image priorSource: 10234429!

GregorianMonthOfYear today!

Date today day!

(Date today) day!

today := Date today!

today mmddyyyy !

today weekday !

today month !

today := Date today month!
!Cashier class methodsFor: 'instance creation' stamp: 'UNS 11/3/2023 20:26:43'!
for: aCart with: aCreditCard 

	^self new initializeWith: aCart! !

!methodRemoval: Cashier class #for: stamp: 'UNS 11/3/2023 20:26:43'!
for: aCart

	^self new initializeWith: aCart!
!Cashier class methodsFor: 'instance creation' stamp: 'UNS 11/3/2023 20:28:21'!
for: aCart with: aCreditCard on: todayMonthOfYear  

	^self new initializeWith: aCart! !

!methodRemoval: Cashier class #for:with: stamp: 'UNS 11/3/2023 20:28:21'!
for: aCart with: aCreditCard 

	^self new initializeWith: aCart!
!Cashier class methodsFor: 'instance creation' stamp: 'UNS 11/3/2023 20:28:37' prior: 50651927!
for: aCart with: aCreditCard on: todayMonthOfYear  

	^self new initializeFor: aCart with: aCreditCard on: todayMonthOfYear! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'UNS 11/3/2023 20:30:20'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'UNS 11/3/2023 20:30:21'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard currentMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'UNS 11/3/2023 20:30:19'!
initializeFor: aCart with: aCreditCard on: aMonthOfYear

	cart := aCart.
	creditCard := aCreditCard.
	currentMonthOfYear := aMonthOfYear! !

!methodRemoval: Cashier #initializeWith: stamp: 'UNS 11/3/2023 20:30:24'!
initializeWith: aCart

	cart := aCart!
!Cashier class methodsFor: 'instance creation' stamp: 'UNS 11/3/2023 20:30:31' prior: 50651938!
for: aCart with: aCreditCard on: aMonthOfYear  

	^self new initializeFor: aCart with: aCreditCard on: aMonthOfYear! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:30:53' prior: 50651458!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2028 month: October.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := Date today month.
	
	cashier := Cashier for: cart with: creditCard on: today.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)
	
! !
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:34:10' prior: 50651780!
checkout
	
	self assertNonEmptyCart.
	self assertNonExpiredCreditCard.
	^self amountDebitedFrom.! !
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:34:20'!
assertNonExpiredCreditCard

	! !

!methodRemoval: Cashier #assertNonExpiredCreditCard stamp: 'UNS 11/3/2023 20:35:40'!
assertNonExpiredCreditCard

	!
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:35:47' prior: 50651995!
checkout
	
	self assertNonEmptyCart.
	^self amountDebitedFrom.! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:38:55' prior: 50651977!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: October.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := Date today month.
	
	cashier := Cashier for: cart with: creditCard on: today.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/3/2023 20:39:01'!
FAILURE!
!Cashier class methodsFor: 'error' stamp: 'UNS 11/3/2023 20:40:50'!
cannotCheckoutWithExpiredCardError
	
	^'A cashier cannot checkout with an expired credit card'! !

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/3/2023 20:40:53'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:41:02' prior: 50652009!
checkout
	
	self assertNonEmptyCart.
	self assertNonExpiredCreditCard.
	^self amountDebitedFrom.! !
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:41:18'!
assertNonExpiredCreditCard

	(creditCard isExpiredAt: currentMonthOfYear)
		ifTrue: [self error: self class cannotCheckoutWithExpiredCardError].
! !
!CreditCard methodsFor: 'nil' stamp: 'UNS 11/3/2023 20:42:04'!
isExpiredAt: aMonthOfYear

	^expiration < aMonthOfYear! !

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/3/2023 20:42:10'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/3/2023 20:42:10'!
ERROR!

monthOfYear := GregorianMonthOfYear year: 2028 month: 9.!

monthOfYear2 := GregorianMonthOfYear year: 2029 month: 10.!

monthOfYear < monthOfYear2!

today := Date today!

Date indexOfMonth: 9!

Date indexOfMonth: October!

Date indexOfMonth: #October!

Date year!

Date today year!

Date today!

Date current !

Date tomorrow !

monthOfYear2 := GregorianMonthOfYear year: Date today year month: Date today month!

Date today year!

today := Date today!

today indexOf: today monthName!

today monthIndex!

monthOfYear2 := GregorianMonthOfYear year: Date today year month: Date today monthIndex!

today yearNumber!

monthOfYear2 := GregorianMonthOfYear year: Date today yearNumber month: Date today monthIndex!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:50:24' prior: 50652014!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:50:53'!
currentMonthOfYear

	^GregorianMonthOfYear year: Date today yearNumber month: Date today monthIndex! !

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/3/2023 20:51:02'!
PASSED!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'UNS 11/3/2023 20:54:05'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 13:16:41'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 13:16:41'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 13:16:41'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 13:16:41'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 13:16:41'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 13:16:49'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 13:16:50'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 13:16:50'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 13:16:50'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 13:16:50'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 13:16:55'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 13:16:55'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:29:31' prior: 50651843!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:29:45' prior: 50651829!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:30:03' prior: 50651816!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 14:30:08'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 14:30:08'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:30:27' prior: 50651751!
test01CashierCannotCheckoutAnEmptyCart
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 14:30:29'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 14:30:29'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 14:30:29'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 14:30:29'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 14:30:29'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 14:30:34'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 14:30:34'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:30:45' prior: 50652202!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:30:47' prior: 50652220!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 14:30:50'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 14:30:50'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 14:30:50'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 14:30:50'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 14:30:50'!
PASSED!
!CreditCardTest methodsFor: 'nil' stamp: 'UNS 11/4/2023 14:32:13'!
test01CreditCardKnowsThatIsExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self assert: creditCard isExpiredAt: today.
	
	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'UNS 11/4/2023 14:32:20' prior: 50652339!
test01CreditCardKnowsThatIsExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self assert: (creditCard isExpiredAt: today)
	
	! !
!CreditCardTest methodsFor: 'nil' stamp: 'UNS 11/4/2023 14:32:38'!
currentMonthOfYear

	^GregorianMonthOfYear year: Date today yearNumber month: Date today monthIndex! !

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/4/2023 14:39:36'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/4/2023 14:39:36'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:40:18'!
test02CreditCardKnowsThatIsNotExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self deny: (creditCard isExpiredAt: today)
	
	! !

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/4/2023 14:40:19'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/4/2023 14:40:19'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/4/2023 14:40:19'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:40:25' prior: 50652376!
test02CreditCardKnowsThatIsNotExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: 'boca' month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self deny: (creditCard isExpiredAt: today)
	
	! !

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/4/2023 14:40:26'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:40:33' prior: 50652398!
test02CreditCardKnowsThatIsNotExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self deny: (creditCard isExpiredAt: today)
	
	! !

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/4/2023 14:40:34'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/4/2023 14:40:34'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/4/2023 14:40:34'!
PASSED!

GregorianMonthOfYear year: 2022 month: 10.!

self class!

GregorianMonthOfYear year: 'a' month: 10.!

self isValidDayNumber: 33!

self isValidDayNumber: 3!

self isValidDayNumber: 3!

self isValidDayNumber: 33!

self monthName!

self!

10!

2023!

self month!

self monthName!

self month monthName!

self month!

self month!

self year !
!CreditCardTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:48:19' prior: 50652352!
test01CreditCardKnowsThatIsExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: 'a' month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self assert: (creditCard isExpiredAt: today)
	
	! !

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/4/2023 14:48:20'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:48:31' prior: 50652447!
test01CreditCardKnowsThatIsExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self assert: (creditCard isExpiredAt: today)
	
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:48:34' prior: 50652462!
test01CreditCardKnowsThatIsExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self assert: (creditCard isExpiredAt: today)
	
	! !

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/4/2023 14:48:34'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/4/2023 14:48:35'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/4/2023 14:48:35'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/4/2023 14:48:37'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/4/2023 14:48:37'!
PASSED!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'UNS 11/4/2023 15:28:46'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 15:28:41'!
test05CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 15:29:01'!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !

!methodRemoval: CashierTest #test05CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 15:29:01'!
test05CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 15:29:54' prior: 50652536!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithARobbedReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 15:48:30' prior: 50652590!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithARobbedReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 15:48:53'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'nil' stamp: 'UNS 11/4/2023 15:51:26'!
hasCredit: aBoolean isRobbed: otherBoolean
	
	^self new initializeWithCredit: aBoolean andRobbedStatus: otherBoolean! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'UNS 11/4/2023 15:52:22'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'credit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'UNS 11/4/2023 15:52:23'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'credit robbed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'UNS 11/4/2023 15:52:21'!
initializeWithCredit: aBoolean andRobbedStatus: otherBoolean

	credit := aBoolean.
	robbed := otherBoolean ! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 15:53:38' prior: 50652617!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithARobbedReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!MerchantProcessorSimulator class methodsFor: 'nil' stamp: 'UNS 11/4/2023 15:53:42'!
debitFrom: aCreditCard totalOf: anAmount

	^self error: self class cannotCheckoutWithARobbedReportedCard! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'UNS 11/4/2023 15:54:21'!
cannotCheckoutWithARobbedReportedCard

	^'Cannot checkout with a robbed credit card'! !
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'UNS 11/4/2023 15:54:30'!
debitFrom: aCreditCard totalOf: anAmount

	^self error: self class cannotCheckoutWithARobbedReportedCard! !

!methodRemoval: MerchantProcessorSimulator class #debitFrom:totalOf: stamp: 'UNS 11/4/2023 15:54:37'!
debitFrom: aCreditCard totalOf: anAmount

	^self error: self class cannotCheckoutWithARobbedReportedCard!
!Cashier class methodsFor: 'instance creation' stamp: 'UNS 11/4/2023 15:55:22'!
for: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator

	^self new initializeFor: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'UNS 11/4/2023 15:55:48'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard currentMonthOfYear merchantProccesorSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'UNS 11/4/2023 15:55:47'!
initializeFor: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator

	cart := aCart.
	creditCard := aCreditCard.
	currentMonthOfYear := aMonthOfYear.
	merchantProccesorSimulator := anMPSimulator ! !

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 15:55:57'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/4/2023 15:56:44' prior: 50652050!
checkout
	
	self assertNonEmptyCart.
	self assertNonExpiredCreditCard.
	merchantProccesorSimulator debitFrom: creditCard totalOf: (self amountDebitedFrom)
	^self amountDebitedFrom.! !
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/4/2023 15:56:50' prior: 50652763!
checkout
	
	self assertNonEmptyCart.
	self assertNonExpiredCreditCard.
	merchantProccesorSimulator debitFrom: creditCard totalOf: (self amountDebitedFrom).
	^self amountDebitedFrom.! !

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 15:56:53'!
FAILURE!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 15:58:19'!
FAILURE!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 15:59:01'!
FAILURE!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 15:59:01'!
FAILURE!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:00:17'!
FAILURE!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:00:21'!
FAILURE!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:00:40'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:01:34' prior: 50652679!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithARobbedReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:02:31'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:08:40'!
test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithANonCreditReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:08:42'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'UNS 11/4/2023 16:09:03'!
cannotCheckoutWithANonCreditReportedCard

	^'Cannot checkout with a card with no credit'! !

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:09:08'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'UNS 11/4/2023 16:12:02' prior: 50652720!
debitFrom: aCreditCard totalOf: anAmount

	robbed ifTrue: [^self error: self class cannotCheckoutWithARobbedReportedCard].
	credit ifFalse: [^self error: self class cannotCheckoutWithANonCreditReportedCard]! !

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:12:04'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:12:06'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 16:12:08'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:12:08'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 16:12:08'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 16:12:08'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 16:12:08'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:12:08'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:12:09'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:12:13'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:12:13'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'UNS 11/4/2023 16:14:10' prior: 50652886!
debitFrom: aCreditCard totalOf: anAmount

	robbed ifTrue: [^self error: self class cannotCheckoutWithARobbedReportedCard].
	credit ifFalse: [^self error: self class cannotCheckoutWithANonCreditReportedCard]
	"realizar purchase"! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 16:16:25'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:16:25'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 16:16:25'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 16:16:25'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 16:16:25'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:16:25'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:16:25'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 16:16:29'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:16:29'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 16:16:29'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 16:16:29'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 16:16:29'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:16:29'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:16:29'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:16:52' prior: 50652097!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:18:50' prior: 50652998!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:19:15' prior: 50652181!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:19:46' prior: 50652287!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:20:01' prior: 50652305!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:20:16' prior: 50652243!
test01CashierCannotCheckoutAnEmptyCart
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 16:20:19'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:20:19'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 16:20:19'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 16:20:19'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 16:20:19'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:20:19'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:20:19'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:20:23'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:20:23'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:20:35' prior: 50653114!
test01CashierCannotCheckoutAnEmptyCart
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:20:38' prior: 50653094!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:20:45' prior: 50653073!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:20:48' prior: 50653049!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:20:51' prior: 50653022!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 16:20:58'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:20:58'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 16:20:58'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 16:20:58'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 16:20:58'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:20:58'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:20:58'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 16:21:00'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:21:00'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 16:21:00'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 16:21:00'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 16:21:00'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:21:00'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:21:00'!
PASSED!

----SNAPSHOT----(4 November 2023 16:21:04) CuisUniversity-5981.image priorSource: 10248283!

----QUIT----(4 November 2023 16:22:00) CuisUniversity-5981.image priorSource: 10293954!

----STARTUP---- (4 November 2023 18:13:36) as D:\UBA 2023\Inge1\CUIS\windows64\windows64\CuisUniversity-5981.image!


Object subclass: #Cashier
	instanceVariableNames: 'cart client creditCard currentMonthOfYear merchantProccesorSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'ght 11/4/2023 19:02:01'!
Object subclass: #Cashier
	instanceVariableNames: 'cart client creditCard currentMonthOfYear merchantProccesorSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:05:32'!
test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithANonCreditReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:13:20' prior: 50653361!
test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := OrderedCollection new.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	
			
	
! !
!Cashier class methodsFor: 'instance creation' stamp: 'ght 11/4/2023 19:14:04'!
for: aClient using: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator

	^self new initializeFor: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator! !
!Cashier methodsFor: 'initialization' stamp: 'ght 11/4/2023 19:14:26'!
initializeFor: aClient using: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator

	cart := aCart.
	creditCard := aCreditCard.
	currentMonthOfYear := aMonthOfYear.
	merchantProccesorSimulator := anMPSimulator ! !
!Cashier methodsFor: 'initialization' stamp: 'ght 11/4/2023 19:15:34' prior: 50653420!
initializeFor: aClient using: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator

	client := aClient.
	cart := aCart.
	creditCard := aCreditCard.
	currentMonthOfYear := aMonthOfYear.
	merchantProccesorSimulator := anMPSimulator ! !

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:15:48'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:15:48'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:15:48'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:15:48'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:15:48'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:15:48'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:15:48'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:15:48'!
PASSED!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:15:48'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:17:24' prior: 50653389!
test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := OrderedCollection new.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	self assert: 1 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
			
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:17:43' prior: 50653475!
test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := OrderedCollection new.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	cashier checkout.
	
	self assert: 1 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
			
	
! !
!Cashier methodsFor: 'checkout' stamp: 'ght 11/4/2023 19:18:31' prior: 50652772!
checkout
	
	self assertNonEmptyCart.
	self assertNonExpiredCreditCard.
	merchantProccesorSimulator debitFrom: creditCard totalOf: (self amountDebitedFrom).
	
	client addAll: 	cart items.! !

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:18:37'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'ght 11/4/2023 19:20:36' prior: 50653412!
for: aClient using: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator

	^self new initializeFor: aClient using: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator! !

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:20:38'!
PASSED!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:20:39'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:20:39'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:20:39'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:20:39'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:20:39'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:20:39'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:20:39'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:20:40'!
PASSED!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:20:40'!
PASSED!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:20:48'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:20:50'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:20:53'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:20:55'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:20:57'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:20:57'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:21:12' prior: 50652842!
test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit
	
	| cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithANonCreditReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:21:20' prior: 50652810!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	| cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithARobbedReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:21:26' prior: 50653259!
test05CashierCannotCheckoutWithAExpiredCard
	
	| cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:21:30' prior: 50653235!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	| cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:21:34' prior: 50653214!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	| cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:21:40' prior: 50653194!
test02CashierCanCheckoutAOneItemCart
	
	| cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:21:44' prior: 50653170!
test01CashierCannotCheckoutAnEmptyCart
	
	| cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:21:49'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:21:51'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:21:51'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:22:44' prior: 50653740!
test02CashierCanCheckoutAOneItemCart
	
	| cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !
!Cashier methodsFor: 'checkout' stamp: 'ght 11/4/2023 19:23:31' prior: 50653528!
checkout
	
	self assertNonEmptyCart.
	self assertNonExpiredCreditCard.
	merchantProccesorSimulator debitFrom: creditCard totalOf: (self amountDebitedFrom).
	
	client addAll: 	cart items.
	
	^self amountDebitedFrom! !
!Cashier methodsFor: 'checkout' stamp: 'ght 11/4/2023 19:24:08'!
assertValidCheckout

	self assertNonEmptyCart.
	self assertNonExpiredCreditCard! !
!Cashier methodsFor: 'checkout' stamp: 'ght 11/4/2023 19:24:09' prior: 50653814!
checkout
	
	self assertValidCheckout.
	merchantProccesorSimulator debitFrom: creditCard totalOf: (self amountDebitedFrom).
	
	client addAll: 	cart items.
	
	^self amountDebitedFrom! !
!CashierTest methodsFor: 'support' stamp: 'ght 11/4/2023 19:25:59'!
clientDefault
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'support' stamp: 'ght 11/4/2023 19:26:15' prior: 50653837!
clientDefault
	
	^OrderedCollection new! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:26:23' prior: 50653760!
test01CashierCannotCheckoutAnEmptyCart
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:26:34' prior: 50653846!
test01CashierCannotCheckoutAnEmptyCart
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:26:47' prior: 50653794!
test02CashierCanCheckoutAOneItemCart
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:26:56' prior: 50653898!
test02CashierCanCheckoutAOneItemCart
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:27:20' prior: 50653719!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:27:31' prior: 50653695!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:27:41' prior: 50653965!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:28:12' prior: 50653668!
test05CashierCannotCheckoutWithAExpiredCard
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:28:21' prior: 50653640!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithARobbedReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:28:30' prior: 50654046!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithARobbedReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:28:47' prior: 50653611!
test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithANonCreditReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:28:49'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:28:49'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:28:50'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:28:50'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:28:50'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:28:50'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:28:50'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:28:50'!
PASSED!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:28:50'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:29:15' prior: 50653501!
test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	cashier checkout.
	
	self assert: 1 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
			
	
! !

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ght 11/4/2023 19:29:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ght 11/4/2023 19:29:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ght 11/4/2023 19:29:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ght 11/4/2023 19:29:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ght 11/4/2023 19:29:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ght 11/4/2023 19:29:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ght 11/4/2023 19:29:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

----SNAPSHOT----(4 November 2023 19:29:35) CuisUniversity-5981.image priorSource: 10294047!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:32:14' prior: 50654169!
test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	cashier checkout.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self assert: 1 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
	
			
	
! !

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:32:16'!
FAILURE!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:32:30'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:33:16' prior: 50654294!
test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self assert: 1 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
	
			
	
! !

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:33:17'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:33:17'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:33:17'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:33:17'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:33:17'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:33:17'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:33:17'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:33:17'!
PASSED!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:33:17'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:35:26'!
test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self assert: 1 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
	
			
	
! !

!methodRemoval: CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:35:26'!
test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self assert: 1 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
	
			
	
!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:35:57'!
test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self assert: 1 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
	
			
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:37:29' prior: 50653872!
test01CashierCannotCheckoutAnEmptyCart
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:37:35' prior: 50653920!
test02CashierCanCheckoutAOneItemCart
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:37:41' prior: 50653942!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:37:49' prior: 50653991!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:37:54' prior: 50654017!
test05CashierCannotCheckoutWithAExpiredCard
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:37:59' prior: 50654075!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithARobbedReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:38:05' prior: 50654105!
test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithANonCreditReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:38:32' prior: 50654474!
test01CashierCannotCheckoutAnEmptyCart
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			self assert: clientPurchases isEmpty]
	
	
! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:38:34'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:38:57' prior: 50654501!
test02CashierCanCheckoutAOneItemCart
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self deny: clientPurchases isEmpty.
	
! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:38:59'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:39:35' prior: 50654524!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout).
	self assert: 7 equals: clientPurchases size 
	
! !

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:39:37'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:40:04' prior: 50654548!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout).
	
	self assert: 12 equals: clientPurchases size   
	
! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:40:06'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:40:23' prior: 50654575!
test05CashierCannotCheckoutWithAExpiredCard
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			self assert: 0 equals: clientPurchases size 
		]
	
! !

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:40:24'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:40:34' prior: 50654604!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithARobbedReportedCard.
			self assert: 0 equals: clientPurchases size 
		]
	
! !

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:40:35'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:40:44' prior: 50654635!
test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithANonCreditReportedCard.
			self assert: 0 equals: clientPurchases size 
		]
	
! !

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:40:45'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:42:04' prior: 50654446!
test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore2.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self assert: 2 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
	
			
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:42:17' prior: 50655125!
test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore2.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self assert: 2 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	self assert: clientPurchases includes: self itemSellByTheStore2.
	
	
			
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:42:36' prior: 50655154!
test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore2.
	
	self assert: (1200 * peso) equals: (cashier checkout).
	self assert: 2 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	self assert: clientPurchases includes: self itemSellByTheStore2.
	
	
			
	
! !

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:42:37'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:43:01' prior: 50655185!
test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore2.
	
	self assert: (2200 * peso) equals: (cashier checkout).
	self assert: 3 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	self assert: clientPurchases includes: self itemSellByTheStore2.
	
	
			
	
! !

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:43:02'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:50:56'!
test10ManyItemAreAddedToClientPurchasesAfterTwoSuccessfulCheckouts
	
	| clientPurchases cashier1 cashier2 cart1 cart2 creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart1 := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier1 := Cashier for: clientPurchases using: cart1 with: creditCard on: today talksWith: mpSimulator.
	
	cart2 := self createCart.	
	
	cashier2 := Cashier for: clientPurchases using: cart2 with: creditCard on: today talksWith: mpSimulator.
		
	cart1 add: self itemSellByTheStore.
	cart2 add: self itemSellByTheStore.
	cart2 add: self itemSellByTheStore2.
	
	self assert: (1000 * peso) equals: (cashier1 checkout).
	self assert: (1200 * peso) equals: (cashier2 checkout).
	
	self assert: 3 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	self assert: clientPurchases includes: self itemSellByTheStore2.
	
	
			
	
! !

!testRun: #CashierTest #test10ManyItemAreAddedToClientPurchasesAfterTwoSuccessfulCheckouts stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:50:59'!
PASSED!

!testRun: #CashierTest #test10ManyItemAreAddedToClientPurchasesAfterTwoSuccessfulCheckouts stamp: 'ght 11/4/2023 19:50:59'!
PASSED!

----SNAPSHOT----(4 November 2023 19:51:22) CuisUniversity-5981.image priorSource: 10324484!

----SNAPSHOT----(4 November 2023 19:51:25) CuisUniversity-5981.image priorSource: 10360059!

----SNAPSHOT----(4 November 2023 19:55:36) CuisUniversity-5981.image priorSource: 10360152!

----SNAPSHOT----(4 November 2023 19:55:39) CuisUniversity-5981.image priorSource: 10360245!