

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (2 November 2023 19:02:03) as /home/clinux01/Descargas/linux64/linux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/Descargas/linux64/linux64/TusLibros.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'us 11/2/2023 19:03:21'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'us 11/2/2023 19:12:22'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'us 11/2/2023 19:12:17'!
test01CashierCannotCheckoutAnEmptyCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			self assert: ( 0 equals: cashier amountDebited: cart) ]
	
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'us 11/2/2023 19:19:20'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'us 11/2/2023 19:19:26'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'us 11/2/2023 19:19:35'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'us 11/2/2023 19:19:40'!
itemSellByTheStore
	
	^ 'validBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'us 11/2/2023 19:19:53' prior: 50650521!
test01CashierCannotCheckoutAnEmptyCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.]
	
	
! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:19:56'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:20:08'!
checkout: cart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:20:46' prior: 50650569!
checkout: aCartToCheckout 
	
	^self error: self class cannotCheckoutEmptyCartError! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:20:52'!
ERROR!
!Cashier class methodsFor: 'error' stamp: 'us 11/2/2023 19:21:00'!
cannotCheckoutEmptyCartError
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error' stamp: 'us 11/2/2023 19:21:22' prior: 50650581!
cannotCheckoutEmptyCartError
	
	^'A cashier cannot checkout an empty cart'! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:21:24'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:21:24'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'us 11/2/2023 19:25:19'!
test02CashierCanCheckoutAOneElementCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout: cart)  
	
! !
!Cart methodsFor: 'queries' stamp: 'us 11/2/2023 19:26:04'!
items

	^items copy ! !
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:26:45' prior: 50650573!
checkout: aCartToCheckout 
	
	(aCartToCheckout items) isEmpty ifTrue: [^self error: self class cannotCheckoutEmptyCartError].
	^100 * peso! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:26:47'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneElementCart stamp: 'us 11/2/2023 19:26:47'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneElementCart stamp: 'us 11/2/2023 19:26:47'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:26:57' prior: 50650611!
checkout: aCartToCheckout 
	
	(aCartToCheckout items) isEmpty ifTrue: [^self error: self class cannotCheckoutEmptyCartError].
	^1000 * peso! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:26:59'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneElementCart stamp: 'us 11/2/2023 19:26:59'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:28:46' prior: 50650628!
checkout: aCartToCheckout 
	
	self assertNonEmptyCart.
	^1000 * peso! !
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:29:15' prior: 50650642!
checkout: aCartToCheckout 
	
	self assertNonEmptyCart: aCartToCheckout.
	^1000 * peso! !
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:29:31'!
assertNonEmptyCart: aCartToCheckout 
	
	(aCartToCheckout items) isEmpty ifTrue: [^self error: self class cannotCheckoutEmptyCartError].	
	

! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:29:48'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneElementCart stamp: 'us 11/2/2023 19:29:48'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'us 11/2/2023 19:32:49'!
test03CashierCanCheckoutAMultipleItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart)  
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'us 11/2/2023 19:33:07'!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout: cart)  
	
! !

!methodRemoval: CashierTest #test02CashierCanCheckoutAOneElementCart stamp: 'us 11/2/2023 19:33:07'!
test02CashierCanCheckoutAOneElementCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout: cart)  
	
!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleItemsCart stamp: 'us 11/2/2023 19:33:09'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleItemsCart stamp: 'us 11/2/2023 19:33:09'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:33:37' prior: 50650647!
checkout: aCartToCheckout 
	
	self assertNonEmptyCart: aCartToCheckout.
	self amountDebitedFrom: aCartToCheckout.! !
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:36:05'!
amountDebitedFrom: aCartToCheckout

	^(aCartToCheckout items) size * 1000! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:36:06'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:36:06'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleItemsCart stamp: 'us 11/2/2023 19:36:06'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:36:11'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:36:11'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:37:01' prior: 50650710!
amountDebitedFrom: aCartToCheckout

	(aCartToCheckout items) size * 1000! !
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:37:05' prior: 50650732!
amountDebitedFrom: aCartToCheckout

	^(aCartToCheckout items) size * 1000! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:37:07'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:37:07'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleItemsCart stamp: 'us 11/2/2023 19:37:07'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:37:09'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:37:09'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:37:16' prior: 50650704!
checkout: aCartToCheckout 
	
	self assertNonEmptyCart: aCartToCheckout.
	^self amountDebitedFrom: aCartToCheckout.! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:37:17'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:37:17'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleItemsCart stamp: 'us 11/2/2023 19:37:17'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:37:22'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:37:22'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 19:37:34' prior: 50650737!
amountDebitedFrom: aCartToCheckout

	^(aCartToCheckout items) size * 1000 * peso! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:37:36'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:37:36'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleItemsCart stamp: 'us 11/2/2023 19:37:36'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:37:52'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:37:52'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleItemsCart stamp: 'us 11/2/2023 19:37:52'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:46:17'!
test04CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart with: creditCard)
	
! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:46:32'!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart)  
	
! !

!methodRemoval: CashierTest #test03CashierCanCheckoutAMultipleItemsCart stamp: 'us 11/2/2023 19:46:32'!
test03CashierCanCheckoutAMultipleItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart)  
	
!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:46:50'!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:46:53'!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart with: creditCard)
	
! !

!methodRemoval: CashierTest #test04CashierCannotCheckoutWithAExpiredCard stamp: 'us 11/2/2023 19:46:53'!
test04CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart with: creditCard)
	
!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:47:05'!
itemSellByTheStore2
	
	^ 'validBook2'! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:47:08'!
itemSellByTheStore3
	
	^ 'validBook3'! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:48:08' prior: 50650839!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOccurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout: cart)  
	
! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 19:48:10'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:50:10' prior: 50650540!
defaultCatalog
	
	|array|
	
	array :=  Array with: self itemSellByTheStore.
	array add: self itemSellByTheStore2.
	array add: self itemSellByTheStore3! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:50:13'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:50:13'!
ERROR!

Array!

Array!

Array!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:51:12' prior: 50650897!
defaultCatalog
	
	|array|
	
	array :=  Bag new.
	array add: self  itemSellByTheStore.
	array add: self itemSellByTheStore2.
	array add: self itemSellByTheStore3! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:51:13'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:51:14'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:51:14'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:52:16' prior: 50650912!
defaultCatalog
	
	|array|
	
	array :=  OrderedCollection new.
	array add: self  itemSellByTheStore.
	array add: self itemSellByTheStore2.
	array add: self itemSellByTheStore3! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:52:17'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:52:18'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:52:18'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:52:38' prior: 50650930!
defaultCatalog
	
	|catalog|
	
	catalog :=  OrderedCollection new.
	catalog add: self  itemSellByTheStore.
	catalog add: self itemSellByTheStore2.
	catalog add: self itemSellByTheStore3! !

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 19:54:05'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 19:54:05'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 19:55:56'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:56:40' prior: 50650948!
defaultCatalog
	
	|catalog|
	
	catalog :=  OrderedCollection new.
	catalog add: self  itemSellByTheStore.
	catalog add: self itemSellByTheStore2.
	catalog add: self itemSellByTheStore3.
	
	^catalog! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 19:56:42'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 19:56:43'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 19:56:44'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 19:56:44'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 19:57:03'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 19:57:13'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 19:57:13'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:58:22' prior: 50650880!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout: cart)  
	
! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 19:58:23'!
FAILURE!

Dictionary with: 1->2!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:02:06' prior: 50650967!
defaultCatalog
	
	|catalog|
	
	catalog :=  Dictionary new.
	catalog add: self  itemSellByTheStore.
	catalog add: self itemSellByTheStore2.
	catalog add: self itemSellByTheStore3.
	
	^catalog! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:02:23' prior: 50650549!
itemSellByTheStore
	
	^ 'validBook' -> 1000 * peso! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:02:33' prior: 50650872!
itemSellByTheStore2
	
	^ 'validBook2' -> 200 * peso! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:02:40' prior: 50650876!
itemSellByTheStore3
	
	^ 'validBook3' -> 300 * peso! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:03:04'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:03:04'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:03:19' prior: 50651028!
itemSellByTheStore
	
	^ 'validBook' -> (1000 * peso)! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:03:21'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:03:21'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:05:31' prior: 50651019!
defaultCatalog
	
	|catalog|
	
	catalog :=  Dictionary with: (self  itemSellByTheStore) -> 1000 * peso
			   with: (self itemSellByTheStore2) -> 200 * peso
			   with: (self itemSellByTheStore3) -> 300 * peso.
	
	^catalog! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:05:43'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:05:43'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:05:56' prior: 50651060!
defaultCatalog
	
	|catalog|
	
	catalog :=  Dictionary with: (self  itemSellByTheStore) -> 1000
			   with: (self itemSellByTheStore2) -> 200
			   with: (self itemSellByTheStore3) -> 300.
	
	^catalog! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:05:58'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:05:58'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:06:07' prior: 50651049!
itemSellByTheStore
	
	^ 'validBook'! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:06:10' prior: 50651033!
itemSellByTheStore2
	
	^ 'validBook2'! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:06:12' prior: 50651038!
itemSellByTheStore3
	
	^ 'validBook3'! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:06:14'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:06:17'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:06:18'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:06:18'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:07:02' prior: 50650677!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: (self itemSellByTheStore) -> 1000.
	
	self assert: (1000 * peso) equals: (cashier checkout: cart)  
	
! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:07:03'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 19:56:40' prior: 50651076!
defaultCatalog
	
	|catalog|
	
	catalog :=  OrderedCollection new.
	catalog add: self  itemSellByTheStore.
	catalog add: self itemSellByTheStore2.
	catalog add: self itemSellByTheStore3.
	
	^catalog! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:08:35'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:08:36'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:08:36'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:08:43' prior: 50651117!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout: cart)  
	
! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:08:44'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 20:08:45'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:09:18' prior: 50651001!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier withCatalogue: self catalogueForCashier.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout: cart)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:10:10'!
catalogForCashier
	
	|catalog|
	
	catalog :=  Dictionary new.
	Dictionary with: (self  itemSellByTheStore) -> 1000
			   with: (self itemSellByTheStore2) -> 200
			   with: (self itemSellByTheStore3) -> 300.
	
	^catalog! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:10:23'!
catalogueForCashier
	
	|catalog|
	
	catalog :=  Dictionary new.
	Dictionary with: (self  itemSellByTheStore) -> 1000
			   with: (self itemSellByTheStore2) -> 200
			   with: (self itemSellByTheStore3) -> 300.
	
	^catalog! !

!methodRemoval: CashierTest #catalogForCashier stamp: 'us 11/2/2023 20:10:23'!
catalogForCashier
	
	|catalog|
	
	catalog :=  Dictionary new.
	Dictionary with: (self  itemSellByTheStore) -> 1000
			   with: (self itemSellByTheStore2) -> 200
			   with: (self itemSellByTheStore3) -> 300.
	
	^catalog!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:10:31'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'us 11/2/2023 20:10:35'!
withCatalogue: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalogue: aRenameMe1 ! !
!Cashier class methodsFor: 'instance creation' stamp: 'us 11/2/2023 20:10:47' prior: 50651212!
withCatalogue: aCatalogue 

	^self new initializeWithCatalogue: aCatalogue ! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:10:50'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'us 11/2/2023 20:10:56'!
Object subclass: #Cashier
	instanceVariableNames: 'catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'us 11/2/2023 20:10:56'!
initializeWithCatalogue: aCatalogue 
	self shouldBeImplemented.
	catalogue := aCatalogue.! !
!Cashier methodsFor: 'initialization' stamp: 'us 11/2/2023 20:10:59' prior: 50651236!
initializeWithCatalogue: aCatalogue 

	catalogue := aCatalogue.! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:11:26'!
FAILURE!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:11:26'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 20:12:38' prior: 50650782!
amountDebitedFrom: aCartToCheckout

	^catalogue sum: [ :anItem | anItem value]! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:12:41'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:12:41'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:14:16' prior: 50651189!
catalogueForCashier
	
	
	^Dictionary with: (self  itemSellByTheStore) -> 1000
			      with: (self itemSellByTheStore2) -> 200
			      with: (self itemSellByTheStore3) -> 300.
	! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:14:25'!
FAILURE!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:14:25'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 20:14:35'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 20:14:35'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:14:40'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:14:42'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:14:42'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:14:53' prior: 50651149!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier withCatalogue: self catalogueForCashier.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout: cart)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:15:01' prior: 50650818!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier withCatalogue: self catalogueForCashier.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart)  
	
! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:15:06'!
FAILURE!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:15:06'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:15:08'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:15:08'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:15:31'!
FAILURE!

----SNAPSHOT----(2 November 2023 20:16:51) CuisUniversity-5981.image priorSource: 10197292!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 20:20:16' prior: 50651254!
amountDebitedFrom: aCartToCheckout

	^(aCartToCheckout items) sum: [ :anItem | catalogue at: anItem]! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:20:21'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:20:21'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 20:20:33' prior: 50651343!
amountDebitedFrom: aCartToCheckout

	^(aCartToCheckout items) sum: [ :anItem | catalogue at: anItem] * peso! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:20:36'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:20:36'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'us 11/2/2023 20:20:48' prior: 50651356!
amountDebitedFrom: aCartToCheckout

	^((aCartToCheckout items) sum: [ :anItem | catalogue at: anItem]) * peso! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:20:49'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'us 11/2/2023 20:20:50'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:20:50'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 20:20:50'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:20:50'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'us 11/2/2023 20:20:50'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'us 11/2/2023 20:20:50'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'us 11/2/2023 20:20:57'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'us 11/2/2023 20:20:58'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'us 11/2/2023 20:20:59'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:29:16' prior: 50650554!
test01CashierCannotCheckoutAnEmptyCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !

Month!

Month new!

Month!

self value!

November of: 2020!

November of: 2020!

GregorianMonthOfYear !

GregorianMonthOfYear new!

GregorianMonthOfYear year: 2028 month: 10!

GregorianMonthOfYear year: 2028 month: October.!

monthOfYear := GregorianMonthOfYear year: 2028 month: October.!

monthOfYear isValid!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'us 11/2/2023 20:49:54'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:47:57' prior: 50650849!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard expiryMonthOfYear|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2028 month: October.
	
	creditCard :=  CreditCard number: '231311' for: 'Pepe' expiring: expiryMonthOfYear.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart from: creditCard)
	
! !

GregorianDate!

GregorianDate today!

Date class today!

Date today!
!CashierTest methodsFor: 'tests' stamp: 'us 11/2/2023 20:56:23' prior: 50651439!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard expiryMonthOfYear|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2028 month: October.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart from: creditCard)
	
! !

----SNAPSHOT----(2 November 2023 21:15:33) CuisUniversity-5981.image priorSource: 10230043!

----SNAPSHOT----(2 November 2023 21:21:42) CuisUniversity-5981.image priorSource: 10234336!

----STARTUP---- (2 November 2023 21:27:31) as C:\Users\usuario\Desktop\URI\INGE I\TDD\cuis\windows64\CuisUniversity-5981.image!


!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/2/2023 21:31:30'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/2/2023 21:31:34'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/2/2023 21:32:37'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/2/2023 21:33:42'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/2/2023 21:33:44'!
PASSED!
!CartTest methodsFor: 'support' stamp: 'UNS 11/3/2023 19:39:52' prior: 50650413!
defaultCatalog
		
	^Dictionary with: (self  itemSellByTheStore) -> 1000
			      with: (self itemSellByTheStore2) -> 200
			      with: (self itemSellByTheStore3) -> 300.
	! !
!CartTest methodsFor: 'support' stamp: 'UNS 11/3/2023 19:40:03'!
itemSellByTheStore2
	
	^ 'validBook2'! !
!CartTest methodsFor: 'support' stamp: 'UNS 11/3/2023 19:40:07'!
itemSellByTheStore3
	
	^ 'validBook3'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UNS 11/3/2023 19:47:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UNS 11/3/2023 19:47:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UNS 11/3/2023 19:47:48'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UNS 11/3/2023 19:47:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UNS 11/3/2023 19:47:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UNS 11/3/2023 19:47:48'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UNS 11/3/2023 19:47:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UNS 11/3/2023 19:47:48'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UNS 11/3/2023 19:47:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UNS 11/3/2023 19:48:01'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UNS 11/3/2023 19:48:01'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UNS 11/3/2023 19:48:08'!
ERROR!

self!

catalog!

catalog!
!Cart methodsFor: 'assertions' stamp: 'UNS 11/3/2023 19:51:44' prior: 50650447!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UNS 11/3/2023 19:51:47'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UNS 11/3/2023 19:51:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UNS 11/3/2023 19:51:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UNS 11/3/2023 19:51:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UNS 11/3/2023 19:51:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UNS 11/3/2023 19:51:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UNS 11/3/2023 19:51:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UNS 11/3/2023 19:51:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UNS 11/3/2023 19:51:51'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/3/2023 19:52:01'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 19:52:01'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/3/2023 19:52:01'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/3/2023 19:52:01'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/3/2023 19:52:01'!
ERROR!

!methodRemoval: CashierTest #catalogueForCashier stamp: 'UNS 11/3/2023 19:52:10'!
catalogueForCashier
	
	
	^Dictionary with: (self  itemSellByTheStore) -> 1000
			      with: (self itemSellByTheStore2) -> 200
			      with: (self itemSellByTheStore3) -> 300.
	!

!methodRemoval: CashierTest #defaultCatalog stamp: 'UNS 11/3/2023 19:52:15'!
defaultCatalog
	
	|catalog|
	
	catalog :=  OrderedCollection new.
	catalog add: self  itemSellByTheStore.
	catalog add: self itemSellByTheStore2.
	catalog add: self itemSellByTheStore3.
	
	^catalog!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 19:52:35'!
defaultCatalog
		
	^Dictionary with: (self  itemSellByTheStore) -> 1000
			      with: (self itemSellByTheStore2) -> 200
			      with: (self itemSellByTheStore3) -> 300.
	! !

Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'UNS 11/3/2023 19:52:53'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: Cashier #initializeWithCatalogue: stamp: 'UNS 11/3/2023 19:53:01'!
initializeWithCatalogue: aCatalogue 

	catalogue := aCatalogue.!

!methodRemoval: Cashier class #withCatalogue: stamp: 'UNS 11/3/2023 19:53:09'!
withCatalogue: aCatalogue 

	^self new initializeWithCatalogue: aCatalogue !
!Cart methodsFor: 'queries' stamp: 'UNS 11/3/2023 20:00:41'!
amountToDebit

	^items sum: [ :anItem | self priceOf: anItem]! !
!Cart methodsFor: 'queries' stamp: 'UNS 11/3/2023 20:00:47' prior: 50651654!
amountToDebit

	^items sum: [ :anItem | self priceOf: anItem]! !
!Cart methodsFor: 'queries' stamp: 'UNS 11/3/2023 20:01:10'!
priceOf: anItem

	^catalog at: anItem! !
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:05:55' prior: 50651369!
amountDebitedFrom: aCartToCheckout

	^aCartToCheckout amountToDebit! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:06:16' prior: 50651300!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout: cart)  
	
! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 20:06:20'!
FAILURE!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 20:06:20'!
FAILURE!
!Cart methodsFor: 'queries' stamp: 'UNS 11/3/2023 20:06:51' prior: 50651663!
priceOf: anItem

	^(catalog at: anItem) * peso! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 20:06:53'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/3/2023 20:06:53'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 20:06:53'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/3/2023 20:06:53'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/3/2023 20:06:53'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/3/2023 20:06:53'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 20:06:56'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:07:02' prior: 50651311!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout: cart)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:07:06' prior: 50651166!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout: cart)  
	
! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 20:07:10'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/3/2023 20:07:10'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/3/2023 20:07:12'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:09:27' prior: 50651409!
test01CashierCannotCheckoutAnEmptyCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier for: cart.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !
!Cashier class methodsFor: 'instance creation' stamp: 'UNS 11/3/2023 20:09:59'!
for: aCart

	^self new initializeWith: aCart! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'UNS 11/3/2023 20:10:34'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'UNS 11/3/2023 20:10:14'!
initializeWith: aCart

	cart := aCart! !
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:10:50'!
checkout
	
	self assertNonEmptyCart.
	^self amountDebitedFrom.! !
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:11:53'!
assertNonEmptyCart 
	
	(cart items) isEmpty ifTrue: [^self error: self class cannotCheckoutEmptyCartError].	
	

! !

!methodRemoval: Cashier #assertNonEmptyCart: stamp: 'UNS 11/3/2023 20:11:57'!
assertNonEmptyCart: aCartToCheckout 
	
	(aCartToCheckout items) isEmpty ifTrue: [^self error: self class cannotCheckoutEmptyCartError].	
	

!
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:12:26'!
amountDebitedFrom

	^cart amountToDebit! !

!methodRemoval: Cashier #amountDebitedFrom: stamp: 'UNS 11/3/2023 20:12:30'!
amountDebitedFrom: aCartToCheckout

	^aCartToCheckout amountToDebit!

!methodRemoval: Cashier #checkout: stamp: 'UNS 11/3/2023 20:12:33'!
checkout: aCartToCheckout 
	
	self assertNonEmptyCart: aCartToCheckout.
	^self amountDebitedFrom: aCartToCheckout.!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/3/2023 20:12:42'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:13:38' prior: 50651672!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier for: cart.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 20:13:39'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:13:49' prior: 50651716!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier for:cart.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)  
	
! !

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/3/2023 20:13:50'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:13:56' prior: 50651727!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart|
	
	cart := self createCart.
	
	cashier := Cashier for: cart.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout)  
	
! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/3/2023 20:13:58'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:14:41' prior: 50651785!
assertNonEmptyCart 
	
	cart isEmpty ifTrue: [^self error: self class cannotCheckoutEmptyCartError].	
	

! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/3/2023 20:14:43'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/3/2023 20:14:44'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/3/2023 20:14:46'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/3/2023 20:14:47'!
PASSED!
!CreditCard class methodsFor: 'nil' stamp: 'UNS 11/3/2023 20:16:14'!
expiring: anExpirationMonthOfYear

	^self new initializeCardExpiring: anExpirationMonthOfYear! !
!CreditCard methodsFor: 'nil' stamp: 'UNS 11/3/2023 20:17:35'!
initializeCardExpiring: anExpirationMonthOfYear

	| expiration |
	expiration	 := anExpirationMonthOfYear! !

!methodRemoval: CreditCard #initializeCardExpiring: stamp: 'UNS 11/3/2023 20:18:10'!
initializeCardExpiring: anExpirationMonthOfYear

	| expiration |
	expiration	 := anExpirationMonthOfYear!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'UNS 11/3/2023 20:18:20'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'nil' stamp: 'UNS 11/3/2023 20:18:18'!
initializeCardExpiring: anExpirationMonthOfYear
	
	expiration := anExpirationMonthOfYear! !

----SNAPSHOT----(3 November 2023 20:19:03) CuisUniversity-5981.image priorSource: 10234429!

GregorianMonthOfYear today!

Date today day!

(Date today) day!

today := Date today!

today mmddyyyy !

today weekday !

today month !

today := Date today month!
!Cashier class methodsFor: 'instance creation' stamp: 'UNS 11/3/2023 20:26:43'!
for: aCart with: aCreditCard 

	^self new initializeWith: aCart! !

!methodRemoval: Cashier class #for: stamp: 'UNS 11/3/2023 20:26:43'!
for: aCart

	^self new initializeWith: aCart!
!Cashier class methodsFor: 'instance creation' stamp: 'UNS 11/3/2023 20:28:21'!
for: aCart with: aCreditCard on: todayMonthOfYear  

	^self new initializeWith: aCart! !

!methodRemoval: Cashier class #for:with: stamp: 'UNS 11/3/2023 20:28:21'!
for: aCart with: aCreditCard 

	^self new initializeWith: aCart!
!Cashier class methodsFor: 'instance creation' stamp: 'UNS 11/3/2023 20:28:37' prior: 50651927!
for: aCart with: aCreditCard on: todayMonthOfYear  

	^self new initializeFor: aCart with: aCreditCard on: todayMonthOfYear! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'UNS 11/3/2023 20:30:20'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'UNS 11/3/2023 20:30:21'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard currentMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'UNS 11/3/2023 20:30:19'!
initializeFor: aCart with: aCreditCard on: aMonthOfYear

	cart := aCart.
	creditCard := aCreditCard.
	currentMonthOfYear := aMonthOfYear! !

!methodRemoval: Cashier #initializeWith: stamp: 'UNS 11/3/2023 20:30:24'!
initializeWith: aCart

	cart := aCart!
!Cashier class methodsFor: 'instance creation' stamp: 'UNS 11/3/2023 20:30:31' prior: 50651938!
for: aCart with: aCreditCard on: aMonthOfYear  

	^self new initializeFor: aCart with: aCreditCard on: aMonthOfYear! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:30:53' prior: 50651458!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2028 month: October.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := Date today month.
	
	cashier := Cashier for: cart with: creditCard on: today.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)
	
! !
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:34:10' prior: 50651780!
checkout
	
	self assertNonEmptyCart.
	self assertNonExpiredCreditCard.
	^self amountDebitedFrom.! !
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:34:20'!
assertNonExpiredCreditCard

	! !

!methodRemoval: Cashier #assertNonExpiredCreditCard stamp: 'UNS 11/3/2023 20:35:40'!
assertNonExpiredCreditCard

	!
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:35:47' prior: 50651995!
checkout
	
	self assertNonEmptyCart.
	^self amountDebitedFrom.! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:38:55' prior: 50651977!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: October.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := Date today month.
	
	cashier := Cashier for: cart with: creditCard on: today.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/3/2023 20:39:01'!
FAILURE!
!Cashier class methodsFor: 'error' stamp: 'UNS 11/3/2023 20:40:50'!
cannotCheckoutWithExpiredCardError
	
	^'A cashier cannot checkout with an expired credit card'! !

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/3/2023 20:40:53'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:41:02' prior: 50652009!
checkout
	
	self assertNonEmptyCart.
	self assertNonExpiredCreditCard.
	^self amountDebitedFrom.! !
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/3/2023 20:41:18'!
assertNonExpiredCreditCard

	(creditCard isExpiredAt: currentMonthOfYear)
		ifTrue: [self error: self class cannotCheckoutWithExpiredCardError].
! !
!CreditCard methodsFor: 'nil' stamp: 'UNS 11/3/2023 20:42:04'!
isExpiredAt: aMonthOfYear

	^expiration < aMonthOfYear! !

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/3/2023 20:42:10'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/3/2023 20:42:10'!
ERROR!

monthOfYear := GregorianMonthOfYear year: 2028 month: 9.!

monthOfYear2 := GregorianMonthOfYear year: 2029 month: 10.!

monthOfYear < monthOfYear2!

today := Date today!

Date indexOfMonth: 9!

Date indexOfMonth: October!

Date indexOfMonth: #October!

Date year!

Date today year!

Date today!

Date current !

Date tomorrow !

monthOfYear2 := GregorianMonthOfYear year: Date today year month: Date today month!

Date today year!

today := Date today!

today indexOf: today monthName!

today monthIndex!

monthOfYear2 := GregorianMonthOfYear year: Date today year month: Date today monthIndex!

today yearNumber!

monthOfYear2 := GregorianMonthOfYear year: Date today yearNumber month: Date today monthIndex!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:50:24' prior: 50652014!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/3/2023 20:50:53'!
currentMonthOfYear

	^GregorianMonthOfYear year: Date today yearNumber month: Date today monthIndex! !

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/3/2023 20:51:02'!
PASSED!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'UNS 11/3/2023 20:54:05'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 13:16:41'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 13:16:41'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 13:16:41'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 13:16:41'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 13:16:41'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 13:16:49'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 13:16:50'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 13:16:50'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 13:16:50'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 13:16:50'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 13:16:55'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 13:16:55'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:29:31' prior: 50651843!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:29:45' prior: 50651829!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:30:03' prior: 50651816!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 14:30:08'!
ERROR!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 14:30:08'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:30:27' prior: 50651751!
test01CashierCannotCheckoutAnEmptyCart
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 14:30:29'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 14:30:29'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 14:30:29'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 14:30:29'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 14:30:29'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 14:30:34'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 14:30:34'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:30:45' prior: 50652202!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:30:47' prior: 50652220!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart creditCard expiryMonthOfYear today|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 14:30:50'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 14:30:50'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 14:30:50'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 14:30:50'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 14:30:50'!
PASSED!
!CreditCardTest methodsFor: 'nil' stamp: 'UNS 11/4/2023 14:32:13'!
test01CreditCardKnowsThatIsExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self assert: creditCard isExpiredAt: today.
	
	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'UNS 11/4/2023 14:32:20' prior: 50652339!
test01CreditCardKnowsThatIsExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self assert: (creditCard isExpiredAt: today)
	
	! !
!CreditCardTest methodsFor: 'nil' stamp: 'UNS 11/4/2023 14:32:38'!
currentMonthOfYear

	^GregorianMonthOfYear year: Date today yearNumber month: Date today monthIndex! !

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/4/2023 14:39:36'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/4/2023 14:39:36'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:40:18'!
test02CreditCardKnowsThatIsNotExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self deny: (creditCard isExpiredAt: today)
	
	! !

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/4/2023 14:40:19'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/4/2023 14:40:19'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/4/2023 14:40:19'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:40:25' prior: 50652376!
test02CreditCardKnowsThatIsNotExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: 'boca' month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self deny: (creditCard isExpiredAt: today)
	
	! !

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/4/2023 14:40:26'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:40:33' prior: 50652398!
test02CreditCardKnowsThatIsNotExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self deny: (creditCard isExpiredAt: today)
	
	! !

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/4/2023 14:40:34'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/4/2023 14:40:34'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/4/2023 14:40:34'!
PASSED!

GregorianMonthOfYear year: 2022 month: 10.!

self class!

GregorianMonthOfYear year: 'a' month: 10.!

self isValidDayNumber: 33!

self isValidDayNumber: 3!

self isValidDayNumber: 3!

self isValidDayNumber: 33!

self monthName!

self!

10!

2023!

self month!

self monthName!

self month monthName!

self month!

self month!

self year !
!CreditCardTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:48:19' prior: 50652352!
test01CreditCardKnowsThatIsExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: 'a' month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self assert: (creditCard isExpiredAt: today)
	
	! !

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/4/2023 14:48:20'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:48:31' prior: 50652447!
test01CreditCardKnowsThatIsExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self assert: (creditCard isExpiredAt: today)
	
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 14:48:34' prior: 50652462!
test01CreditCardKnowsThatIsExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self assert: (creditCard isExpiredAt: today)
	
	! !

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/4/2023 14:48:34'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/4/2023 14:48:35'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/4/2023 14:48:35'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/4/2023 14:48:37'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/4/2023 14:48:37'!
PASSED!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'UNS 11/4/2023 15:28:46'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 15:28:41'!
test05CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 15:29:01'!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !

!methodRemoval: CashierTest #test05CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 15:29:01'!
test05CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 15:29:54' prior: 50652536!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithARobbedReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 15:48:30' prior: 50652590!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithARobbedReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 15:48:53'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'nil' stamp: 'UNS 11/4/2023 15:51:26'!
hasCredit: aBoolean isRobbed: otherBoolean
	
	^self new initializeWithCredit: aBoolean andRobbedStatus: otherBoolean! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'UNS 11/4/2023 15:52:22'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'credit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'UNS 11/4/2023 15:52:23'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'credit robbed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'UNS 11/4/2023 15:52:21'!
initializeWithCredit: aBoolean andRobbedStatus: otherBoolean

	credit := aBoolean.
	robbed := otherBoolean ! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 15:53:38' prior: 50652617!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithARobbedReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!MerchantProcessorSimulator class methodsFor: 'nil' stamp: 'UNS 11/4/2023 15:53:42'!
debitFrom: aCreditCard totalOf: anAmount

	^self error: self class cannotCheckoutWithARobbedReportedCard! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'UNS 11/4/2023 15:54:21'!
cannotCheckoutWithARobbedReportedCard

	^'Cannot checkout with a robbed credit card'! !
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'UNS 11/4/2023 15:54:30'!
debitFrom: aCreditCard totalOf: anAmount

	^self error: self class cannotCheckoutWithARobbedReportedCard! !

!methodRemoval: MerchantProcessorSimulator class #debitFrom:totalOf: stamp: 'UNS 11/4/2023 15:54:37'!
debitFrom: aCreditCard totalOf: anAmount

	^self error: self class cannotCheckoutWithARobbedReportedCard!
!Cashier class methodsFor: 'instance creation' stamp: 'UNS 11/4/2023 15:55:22'!
for: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator

	^self new initializeFor: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'UNS 11/4/2023 15:55:48'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard currentMonthOfYear merchantProccesorSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'UNS 11/4/2023 15:55:47'!
initializeFor: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator

	cart := aCart.
	creditCard := aCreditCard.
	currentMonthOfYear := aMonthOfYear.
	merchantProccesorSimulator := anMPSimulator ! !

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 15:55:57'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/4/2023 15:56:44' prior: 50652050!
checkout
	
	self assertNonEmptyCart.
	self assertNonExpiredCreditCard.
	merchantProccesorSimulator debitFrom: creditCard totalOf: (self amountDebitedFrom)
	^self amountDebitedFrom.! !
!Cashier methodsFor: 'checkout' stamp: 'UNS 11/4/2023 15:56:50' prior: 50652763!
checkout
	
	self assertNonEmptyCart.
	self assertNonExpiredCreditCard.
	merchantProccesorSimulator debitFrom: creditCard totalOf: (self amountDebitedFrom).
	^self amountDebitedFrom.! !

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 15:56:53'!
FAILURE!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 15:58:19'!
FAILURE!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 15:59:01'!
FAILURE!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 15:59:01'!
FAILURE!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:00:17'!
FAILURE!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:00:21'!
FAILURE!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:00:40'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:01:34' prior: 50652679!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithARobbedReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:02:31'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:08:40'!
test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithANonCreditReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:08:42'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'error' stamp: 'UNS 11/4/2023 16:09:03'!
cannotCheckoutWithANonCreditReportedCard

	^'Cannot checkout with a card with no credit'! !

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:09:08'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'UNS 11/4/2023 16:12:02' prior: 50652720!
debitFrom: aCreditCard totalOf: anAmount

	robbed ifTrue: [^self error: self class cannotCheckoutWithARobbedReportedCard].
	credit ifFalse: [^self error: self class cannotCheckoutWithANonCreditReportedCard]! !

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:12:04'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:12:06'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 16:12:08'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:12:08'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 16:12:08'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 16:12:08'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 16:12:08'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:12:08'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:12:09'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:12:13'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:12:13'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'UNS 11/4/2023 16:14:10' prior: 50652886!
debitFrom: aCreditCard totalOf: anAmount

	robbed ifTrue: [^self error: self class cannotCheckoutWithARobbedReportedCard].
	credit ifFalse: [^self error: self class cannotCheckoutWithANonCreditReportedCard]
	"realizar purchase"! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 16:16:25'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:16:25'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 16:16:25'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 16:16:25'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 16:16:25'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:16:25'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:16:25'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 16:16:29'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:16:29'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 16:16:29'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 16:16:29'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 16:16:29'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:16:29'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:16:29'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:16:52' prior: 50652097!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	cashier := Cashier for: cart with: creditCard on: today.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:18:50' prior: 50652998!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:19:15' prior: 50652181!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:19:46' prior: 50652287!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:20:01' prior: 50652305!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:20:16' prior: 50652243!
test01CashierCannotCheckoutAnEmptyCart
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 16:20:19'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:20:19'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 16:20:19'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 16:20:19'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 16:20:19'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:20:19'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:20:19'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:20:23'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:20:23'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:20:35' prior: 50653114!
test01CashierCannotCheckoutAnEmptyCart
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:20:38' prior: 50653094!
test02CashierCanCheckoutAOneItemCart
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:20:45' prior: 50653073!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:20:48' prior: 50653049!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/4/2023 16:20:51' prior: 50653022!
test05CashierCannotCheckoutWithAExpiredCard
	
	|cashier cart creditCard expiryMonthOfYear today mpSimulator|
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 16:20:58'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:20:58'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 16:20:58'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 16:20:58'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 16:20:58'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:20:58'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:20:58'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/4/2023 16:21:00'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/4/2023 16:21:00'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/4/2023 16:21:00'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/4/2023 16:21:00'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/4/2023 16:21:00'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/4/2023 16:21:00'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/4/2023 16:21:00'!
PASSED!

----SNAPSHOT----(4 November 2023 16:21:04) CuisUniversity-5981.image priorSource: 10248283!

----QUIT----(4 November 2023 16:22:00) CuisUniversity-5981.image priorSource: 10293954!

----STARTUP---- (4 November 2023 18:13:36) as D:\UBA 2023\Inge1\CUIS\windows64\windows64\CuisUniversity-5981.image!


Object subclass: #Cashier
	instanceVariableNames: 'cart client creditCard currentMonthOfYear merchantProccesorSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'ght 11/4/2023 19:02:01'!
Object subclass: #Cashier
	instanceVariableNames: 'cart client creditCard currentMonthOfYear merchantProccesorSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:05:32'!
test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithANonCreditReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:13:20' prior: 50653361!
test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := OrderedCollection new.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	
			
	
! !
!Cashier class methodsFor: 'instance creation' stamp: 'ght 11/4/2023 19:14:04'!
for: aClient using: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator

	^self new initializeFor: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator! !
!Cashier methodsFor: 'initialization' stamp: 'ght 11/4/2023 19:14:26'!
initializeFor: aClient using: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator

	cart := aCart.
	creditCard := aCreditCard.
	currentMonthOfYear := aMonthOfYear.
	merchantProccesorSimulator := anMPSimulator ! !
!Cashier methodsFor: 'initialization' stamp: 'ght 11/4/2023 19:15:34' prior: 50653420!
initializeFor: aClient using: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator

	client := aClient.
	cart := aCart.
	creditCard := aCreditCard.
	currentMonthOfYear := aMonthOfYear.
	merchantProccesorSimulator := anMPSimulator ! !

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:15:48'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:15:48'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:15:48'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:15:48'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:15:48'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:15:48'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:15:48'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:15:48'!
PASSED!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:15:48'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:17:24' prior: 50653389!
test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := OrderedCollection new.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	self assert: 1 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
			
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:17:43' prior: 50653475!
test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := OrderedCollection new.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	cashier checkout.
	
	self assert: 1 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
			
	
! !
!Cashier methodsFor: 'checkout' stamp: 'ght 11/4/2023 19:18:31' prior: 50652772!
checkout
	
	self assertNonEmptyCart.
	self assertNonExpiredCreditCard.
	merchantProccesorSimulator debitFrom: creditCard totalOf: (self amountDebitedFrom).
	
	client addAll: 	cart items.! !

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:18:37'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'ght 11/4/2023 19:20:36' prior: 50653412!
for: aClient using: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator

	^self new initializeFor: aClient using: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator! !

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:20:38'!
PASSED!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:20:39'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:20:39'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:20:39'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:20:39'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:20:39'!
ERROR!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:20:39'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:20:39'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:20:40'!
PASSED!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:20:40'!
PASSED!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:20:48'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:20:50'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:20:53'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:20:55'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:20:57'!
ERROR!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:20:57'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:21:12' prior: 50652842!
test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit
	
	| cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithANonCreditReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:21:20' prior: 50652810!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	| cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithARobbedReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:21:26' prior: 50653259!
test05CashierCannotCheckoutWithAExpiredCard
	
	| cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:21:30' prior: 50653235!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	| cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:21:34' prior: 50653214!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	| cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:21:40' prior: 50653194!
test02CashierCanCheckoutAOneItemCart
	
	| cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:21:44' prior: 50653170!
test01CashierCannotCheckoutAnEmptyCart
	
	| cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:21:49'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:21:51'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:21:51'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:22:44' prior: 50653740!
test02CashierCanCheckoutAOneItemCart
	
	| cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !
!Cashier methodsFor: 'checkout' stamp: 'ght 11/4/2023 19:23:31' prior: 50653528!
checkout
	
	self assertNonEmptyCart.
	self assertNonExpiredCreditCard.
	merchantProccesorSimulator debitFrom: creditCard totalOf: (self amountDebitedFrom).
	
	client addAll: 	cart items.
	
	^self amountDebitedFrom! !
!Cashier methodsFor: 'checkout' stamp: 'ght 11/4/2023 19:24:08'!
assertValidCheckout

	self assertNonEmptyCart.
	self assertNonExpiredCreditCard! !
!Cashier methodsFor: 'checkout' stamp: 'ght 11/4/2023 19:24:09' prior: 50653814!
checkout
	
	self assertValidCheckout.
	merchantProccesorSimulator debitFrom: creditCard totalOf: (self amountDebitedFrom).
	
	client addAll: 	cart items.
	
	^self amountDebitedFrom! !
!CashierTest methodsFor: 'support' stamp: 'ght 11/4/2023 19:25:59'!
clientDefault
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'support' stamp: 'ght 11/4/2023 19:26:15' prior: 50653837!
clientDefault
	
	^OrderedCollection new! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:26:23' prior: 50653760!
test01CashierCannotCheckoutAnEmptyCart
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:26:34' prior: 50653846!
test01CashierCannotCheckoutAnEmptyCart
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:26:47' prior: 50653794!
test02CashierCanCheckoutAOneItemCart
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:26:56' prior: 50653898!
test02CashierCanCheckoutAOneItemCart
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:27:20' prior: 50653719!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:27:31' prior: 50653695!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:27:41' prior: 50653965!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:28:12' prior: 50653668!
test05CashierCannotCheckoutWithAExpiredCard
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:28:21' prior: 50653640!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
	
	cashier := Cashier for: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithARobbedReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:28:30' prior: 50654046!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithARobbedReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:28:47' prior: 50653611!
test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithANonCreditReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:28:49'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:28:49'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:28:50'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:28:50'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:28:50'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:28:50'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:28:50'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:28:50'!
PASSED!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:28:50'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:29:15' prior: 50653501!
test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	cashier checkout.
	
	self assert: 1 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
			
	
! !

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:29:16'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ght 11/4/2023 19:29:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ght 11/4/2023 19:29:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ght 11/4/2023 19:29:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ght 11/4/2023 19:29:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ght 11/4/2023 19:29:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ght 11/4/2023 19:29:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ght 11/4/2023 19:29:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'ght 11/4/2023 19:29:26'!
PASSED!

----SNAPSHOT----(4 November 2023 19:29:35) CuisUniversity-5981.image priorSource: 10294047!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:32:14' prior: 50654169!
test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	cashier checkout.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self assert: 1 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
	
			
	
! !

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:32:16'!
FAILURE!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:32:30'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:33:16' prior: 50654294!
test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self assert: 1 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
	
			
	
! !

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:33:17'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:33:17'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:33:17'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:33:17'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:33:17'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:33:17'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:33:17'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:33:17'!
PASSED!

!testRun: #CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:33:17'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:35:26'!
test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self assert: 1 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
	
			
	
! !

!methodRemoval: CashierTest #test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:35:26'!
test08APurchaseIsAddedToRespectiveClientAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self assert: 1 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
	
			
	
!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:35:57'!
test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self assert: 1 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
	
			
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:37:29' prior: 50653872!
test01CashierCannotCheckoutAnEmptyCart
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			"self assert: no se vendió nada"]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:37:35' prior: 50653920!
test02CashierCanCheckoutAOneItemCart
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:37:41' prior: 50653942!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:37:49' prior: 50653991!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout)  
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:37:54' prior: 50654017!
test05CashierCannotCheckoutWithAExpiredCard
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:37:59' prior: 50654075!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithARobbedReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:38:05' prior: 50654105!
test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithANonCreditReportedCard.
			"chequear que no se haya hecho nada"
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:38:32' prior: 50654474!
test01CashierCannotCheckoutAnEmptyCart
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
	
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutEmptyCartError.
			self assert: clientPurchases isEmpty]
	
	
! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:38:34'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:38:34'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:38:57' prior: 50654501!
test02CashierCanCheckoutAOneItemCart
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self deny: clientPurchases isEmpty.
	
! !

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:38:59'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:38:59'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:39:35' prior: 50654524!
test03CashierCanCheckoutAMultipleEqualItemsCart
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	
	self assert: (7000* peso) equals: (cashier checkout).
	self assert: 7 equals: clientPurchases size 
	
! !

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:39:37'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:39:37'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:40:04' prior: 50654548!
test04CashierCanCheckoutAMultipleDifferentItemsCart
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
	
	cart add: self itemSellByTheStore withOcurrences: 7.
	cart add: self itemSellByTheStore2.
	cart add: self itemSellByTheStore3 withOcurrences: 4.
	
	self assert: (8400* peso) equals: (cashier checkout).
	
	self assert: 12 equals: clientPurchases size   
	
! !

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:40:06'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:40:06'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:40:23' prior: 50654575!
test05CashierCannotCheckoutWithAExpiredCard
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2022 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cannotCheckoutWithExpiredCardError.
			self assert: 0 equals: clientPurchases size 
		]
	
! !

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:40:24'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:40:24'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:40:34' prior: 50654604!
test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: true.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithARobbedReportedCard.
			self assert: 0 equals: clientPurchases size 
		]
	
! !

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:40:35'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:40:35'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:40:44' prior: 50654635!
test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: false isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore withOcurrences: 7.
		
	self 
		should: [cashier checkout]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = MerchantProcessorSimulator cannotCheckoutWithANonCreditReportedCard.
			self assert: 0 equals: clientPurchases size 
		]
	
! !

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:40:45'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:40:45'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:42:04' prior: 50654446!
test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore2.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self assert: 2 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	
	
			
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:42:17' prior: 50655125!
test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore2.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self assert: 2 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	self assert: clientPurchases includes: self itemSellByTheStore2.
	
	
			
	
! !
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:42:36' prior: 50655154!
test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore2.
	
	self assert: (1200 * peso) equals: (cashier checkout).
	self assert: 2 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	self assert: clientPurchases includes: self itemSellByTheStore2.
	
	
			
	
! !

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:42:37'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:42:37'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:43:01' prior: 50655185!
test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout
	
	| clientPurchases cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: clientPurchases using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore2.
	
	self assert: (2200 * peso) equals: (cashier checkout).
	self assert: 3 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	self assert: clientPurchases includes: self itemSellByTheStore2.
	
	
			
	
! !

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:43:02'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:43:02'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ght 11/4/2023 19:50:56'!
test10ManyItemAreAddedToClientPurchasesAfterTwoSuccessfulCheckouts
	
	| clientPurchases cashier1 cashier2 cart1 cart2 creditCard expiryMonthOfYear today mpSimulator |
	
	clientPurchases := self clientDefault.
	
	cart1 := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier1 := Cashier for: clientPurchases using: cart1 with: creditCard on: today talksWith: mpSimulator.
	
	cart2 := self createCart.	
	
	cashier2 := Cashier for: clientPurchases using: cart2 with: creditCard on: today talksWith: mpSimulator.
		
	cart1 add: self itemSellByTheStore.
	cart2 add: self itemSellByTheStore.
	cart2 add: self itemSellByTheStore2.
	
	self assert: (1000 * peso) equals: (cashier1 checkout).
	self assert: (1200 * peso) equals: (cashier2 checkout).
	
	self assert: 3 equals: clientPurchases size.
	self assert: clientPurchases includes: self itemSellByTheStore.
	self assert: clientPurchases includes: self itemSellByTheStore2.
	
	
			
	
! !

!testRun: #CashierTest #test10ManyItemAreAddedToClientPurchasesAfterTwoSuccessfulCheckouts stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:50:58'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'ght 11/4/2023 19:50:59'!
PASSED!

!testRun: #CashierTest #test10ManyItemAreAddedToClientPurchasesAfterTwoSuccessfulCheckouts stamp: 'ght 11/4/2023 19:50:59'!
PASSED!

----SNAPSHOT----(4 November 2023 19:51:22) CuisUniversity-5981.image priorSource: 10324484!

----SNAPSHOT----(4 November 2023 19:51:25) CuisUniversity-5981.image priorSource: 10360059!

----SNAPSHOT----(4 November 2023 19:55:36) CuisUniversity-5981.image priorSource: 10360152!

----SNAPSHOT----(4 November 2023 19:55:39) CuisUniversity-5981.image priorSource: 10360245!

----STARTUP---- (6 November 2023 16:34:24) as C:\Users\usuario\Desktop\URI\INGE I\TDD\cuis\windows64\CuisUniversity-5981.image!

!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 16:39:17' prior: 50652937!
debitFrom: aCreditCard totalOf: anAmount

	self assertIsARobbedCard.
	self assertIsACardWithNoCredit.
	robbed ifTrue: [^self error: self class cannotCheckoutWithARobbedReportedCard].
	credit ifFalse: [^self error: self class cannotCheckoutWithANonCreditReportedCard]
	"realizar purchase"! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 16:39:30'!
assertIsARobbedCard

	robbed ifTrue: [^self error: self class cannotCheckoutWithARobbedReportedCard].
! !
!MerchantProcessorSimulator methodsFor: 'checkout' stamp: 'UNS 11/6/2023 16:40:53'!
assertIsACardWithNoCredit

	credit ifFalse: [^self error: self class cannotCheckoutWithANonCreditReportedCard]
! !
!MerchantProcessorSimulator methodsFor: 'checkout' stamp: 'UNS 11/6/2023 16:41:11' prior: 50655420!
debitFrom: aCreditCard totalOf: anAmount

	self assertIsARobbedCard.
	self assertIsACardWithNoCredit.
	"realizar purchase"! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/6/2023 16:41:37'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/6/2023 16:41:37'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/6/2023 16:41:37'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/6/2023 16:41:37'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/6/2023 16:41:37'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/6/2023 16:41:37'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/6/2023 16:41:37'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'UNS 11/6/2023 16:41:37'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'UNS 11/6/2023 16:41:37'!
PASSED!

!testRun: #CashierTest #test10ManyItemAreAddedToClientPurchasesAfterTwoSuccessfulCheckouts stamp: 'UNS 11/6/2023 16:41:37'!
PASSED!

----SNAPSHOT----(6 November 2023 16:46:55) CuisUniversity-5981.image priorSource: 10360338!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 16:47:44' prior: 50654391!
test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self assert: 1 equals: client size.
	self assert: client includes: self itemSellByTheStore.
	
	
			
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 16:47:56' prior: 50655253!
test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore2.
	
	self assert: (2200 * peso) equals: (cashier checkout).
	self assert: 3 equals: client size.
	self assert: client includes: self itemSellByTheStore.
	self assert: client includes: self itemSellByTheStore2.
	
	
			
	
! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 16:48:11' prior: 50655322!
test10ManyItemAreAddedToClientPurchasesAfterTwoSuccessfulCheckouts
	
	| client cashier1 cashier2 cart1 cart2 creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart1 := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier1 := Cashier for: client using: cart1 with: creditCard on: today talksWith: mpSimulator.
	
	cart2 := self createCart.	
	
	cashier2 := Cashier for: client using: cart2 with: creditCard on: today talksWith: mpSimulator.
		
	cart1 add: self itemSellByTheStore.
	cart2 add: self itemSellByTheStore.
	cart2 add: self itemSellByTheStore2.
	
	self assert: (1000 * peso) equals: (cashier1 checkout).
	self assert: (1200 * peso) equals: (cashier2 checkout).
	
	self assert: 3 equals: client size.
	self assert: client includes: self itemSellByTheStore.
	self assert: client includes: self itemSellByTheStore2.
	
	
			
	
! !

----SNAPSHOT----(6 November 2023 16:48:19) CuisUniversity-5981.image priorSource: 10362871!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 17:00:15' prior: 50655550!
test10ManyItemAreAddedToClientPurchasesAfterTwoSuccessfulCheckouts
	
	| client cashier1 cashier2 cart1 cart2 creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart1 := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier1 := Cashier for: client using: cart1 with: creditCard on: today talksWith: mpSimulator.
	
	cart2 := self createCart.	
	
	cashier2 := Cashier for: client using: cart2 with: creditCard on: today talksWith: mpSimulator.
		
	cart1 add: self itemSellByTheStore.
	cart2 add: self itemSellByTheStore.
	cart2 add: self itemSellByTheStore2.
	
	self assert: (1000 * peso) equals: (cashier1 checkout).
	self assert: (1200 * peso) equals: (cashier2 checkout).
	
	self assert: 3 equals: client size.
	self assert: client includes: self itemSellByTheStore.
	self assert: client includes: self itemSellByTheStore2.
	
	
			
	
! !

!testRun: #CashierTest #test10ManyItemAreAddedToClientPurchasesAfterTwoSuccessfulCheckouts stamp: 'UNS 11/6/2023 17:00:15'!
PASSED!

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/6/2023 17:00:15'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/6/2023 17:00:16'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/6/2023 17:00:16'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/6/2023 17:00:16'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/6/2023 17:00:16'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/6/2023 17:00:16'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/6/2023 17:00:16'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'UNS 11/6/2023 17:00:16'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'UNS 11/6/2023 17:00:16'!
PASSED!

!testRun: #CashierTest #test10ManyItemAreAddedToClientPurchasesAfterTwoSuccessfulCheckouts stamp: 'UNS 11/6/2023 17:00:16'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 17:00:36' prior: 50655494!
test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	
	self assert: (1000 * peso) equals: (cashier checkout).
	self assert: 1 equals: client size.
	self assert: client includes: self itemSellByTheStore.! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 17:00:41' prior: 50655590!
test10ManyItemAreAddedToClientPurchasesAfterTwoSuccessfulCheckouts
	
	| client cashier1 cashier2 cart1 cart2 creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart1 := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier1 := Cashier for: client using: cart1 with: creditCard on: today talksWith: mpSimulator.
	
	cart2 := self createCart.	
	
	cashier2 := Cashier for: client using: cart2 with: creditCard on: today talksWith: mpSimulator.
		
	cart1 add: self itemSellByTheStore.
	cart2 add: self itemSellByTheStore.
	cart2 add: self itemSellByTheStore2.
	
	self assert: (1000 * peso) equals: (cashier1 checkout).
	self assert: (1200 * peso) equals: (cashier2 checkout).
	
	self assert: 3 equals: client size.
	self assert: client includes: self itemSellByTheStore.
	self assert: client includes: self itemSellByTheStore2.! !
!CashierTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 17:00:46' prior: 50655520!
test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout
	
	| client cashier cart creditCard expiryMonthOfYear today mpSimulator |
	
	client := self clientDefault.
	
	cart := self createCart.	
	
	expiryMonthOfYear := GregorianMonthOfYear year: 2026 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	mpSimulator := MerchantProcessorSimulator hasCredit: true isRobbed: false.
	
	cashier := Cashier for: client using: cart with: creditCard on: today talksWith: mpSimulator.
		
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore2.
	
	self assert: (2200 * peso) equals: (cashier checkout).
	self assert: 3 equals: client size.
	self assert: client includes: self itemSellByTheStore.
	self assert: client includes: self itemSellByTheStore2.! !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/6/2023 17:48:21'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/6/2023 17:48:21'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/6/2023 17:48:21'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/6/2023 17:48:21'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/6/2023 17:48:21'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/6/2023 17:48:21'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/6/2023 17:48:21'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'UNS 11/6/2023 17:48:21'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'UNS 11/6/2023 17:48:21'!
PASSED!

!testRun: #CashierTest #test10ManyItemAreAddedToClientPurchasesAfterTwoSuccessfulCheckouts stamp: 'UNS 11/6/2023 17:48:21'!
PASSED!

!methodRemoval: Cashier class #for:with:on: stamp: 'UNS 11/6/2023 17:52:26'!
for: aCart with: aCreditCard on: aMonthOfYear  

	^self new initializeFor: aCart with: aCreditCard on: aMonthOfYear!

!methodRemoval: Cashier class #for:with:on:talksWith: stamp: 'UNS 11/6/2023 17:52:27'!
for: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator

	^self new initializeFor: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator!

!methodRemoval: Cashier #initializeFor:with:on: stamp: 'UNS 11/6/2023 17:52:29'!
initializeFor: aCart with: aCreditCard on: aMonthOfYear

	cart := aCart.
	creditCard := aCreditCard.
	currentMonthOfYear := aMonthOfYear!

!methodRemoval: Cashier #initializeFor:with:on:talksWith: stamp: 'UNS 11/6/2023 17:52:31'!
initializeFor: aCart with: aCreditCard on: aMonthOfYear talksWith: anMPSimulator

	cart := aCart.
	creditCard := aCreditCard.
	currentMonthOfYear := aMonthOfYear.
	merchantProccesorSimulator := anMPSimulator !

!testRun: #CashierTest #test01CashierCannotCheckoutAnEmptyCart stamp: 'UNS 11/6/2023 17:52:33'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutAOneItemCart stamp: 'UNS 11/6/2023 17:52:33'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutAMultipleEqualItemsCart stamp: 'UNS 11/6/2023 17:52:33'!
PASSED!

!testRun: #CashierTest #test04CashierCanCheckoutAMultipleDifferentItemsCart stamp: 'UNS 11/6/2023 17:52:33'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutWithAExpiredCard stamp: 'UNS 11/6/2023 17:52:33'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutAfterMerchantProcessorReportsRobbedCard stamp: 'UNS 11/6/2023 17:52:33'!
PASSED!

!testRun: #CashierTest #test07CashierCannotCheckoutAfterMerchantProcessorReportsCardWithNoCredit stamp: 'UNS 11/6/2023 17:52:33'!
PASSED!

!testRun: #CashierTest #test08AnItemIsAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'UNS 11/6/2023 17:52:33'!
PASSED!

!testRun: #CashierTest #test09ManyItemAreAddedToClientPurchasesAfterSuccessfulCheckout stamp: 'UNS 11/6/2023 17:52:33'!
PASSED!

!testRun: #CashierTest #test10ManyItemAreAddedToClientPurchasesAfterTwoSuccessfulCheckouts stamp: 'UNS 11/6/2023 17:52:33'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 18:03:55' prior: 50652414!
test02CreditCardKnowsThatIsNotExpired

	|creditCard expiryMonthOfYear today|
	
	expiryMonthOfYear := GregorianMonthOfYear year: Date today yearNumber + 1 month: 10.
	
	creditCard :=  CreditCard expiring: expiryMonthOfYear.
	
	today := self currentMonthOfYear.
	
	self deny: (creditCard isExpiredAt: today)
	
	! !

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/6/2023 18:03:57'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/6/2023 18:03:57'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/6/2023 18:03:57'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardKnowsThatIsExpired stamp: 'UNS 11/6/2023 18:03:58'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardKnowsThatIsNotExpired stamp: 'UNS 11/6/2023 18:03:59'!
PASSED!

!classRemoval: #MerchantProcessorSimulator stamp: 'UNS 11/6/2023 19:47:14'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'credit robbed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'UNS 11/6/2023 19:47:14'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'UNS 11/6/2023 19:47:14'!
Object subclass: #Cashier
	instanceVariableNames: 'cart client creditCard currentMonthOfYear merchantProccesorSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'UNS 11/6/2023 19:47:14'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'UNS 11/6/2023 19:47:15'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'UNS 11/6/2023 19:47:15'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'UNS 11/6/2023 19:47:15'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\usuario\Desktop\URI\INGE I\TDD\cuis\windows64\TusLibros-33.st----!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'UNS 11/6/2023 19:48:16'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'UNS 11/6/2023 19:48:16'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'UNS 11/6/2023 19:48:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'UNS 11/6/2023 19:48:16'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'UNS 11/6/2023 19:48:16'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'UNS 11/6/2023 19:48:16'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UNS 11/6/2023 19:48:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UNS 11/6/2023 19:48:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UNS 11/6/2023 19:48:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UNS 11/6/2023 19:48:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UNS 11/6/2023 19:48:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UNS 11/6/2023 19:48:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UNS 11/6/2023 19:48:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UNS 11/6/2023 19:48:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'UNS 11/6/2023 19:48:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'UNS 11/6/2023 19:48:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'UNS 11/6/2023 19:48:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'UNS 11/6/2023 19:48:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'UNS 11/6/2023 19:48:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'UNS 11/6/2023 19:48:32'!
PASSED!

Object subclass: #InputInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InputInterface category: 'TusLibros' stamp: 'UNS 11/6/2023 20:08:45'!
Object subclass: #InputInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #InputInterface as: #InputInterfaceTest stamp: 'UNS 11/6/2023 20:09:05'!
Smalltalk renameClassNamed: #InputInterface as: #InputInterfaceTest!

TestCase subclass: #InputInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InputInterfaceTest category: 'TusLibros' stamp: 'UNS 11/6/2023 20:09:07'!
TestCase subclass: #InputInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InputInterfaceTest methodsFor: 'nil' stamp: 'UNS 11/6/2023 20:18:11'!
test01CartCannotBeCreatedWithAnInvalidUserID

	|inputInterface|
	
	inputInterface := self createInputInterfacewithClientID: 28 and password: 'Password1'.
	
	
	
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 20:18:40' prior: 50656589!
test01CartCannotBeCreatedWithAnInvalidUserID

	|inputInterface|
	
	inputInterface := self createInputInterfacewithClientID: 28 andPassword: 'Password1'.
	
	
	
			! !

!classDefinition: #InputInterfaceTest category: 'TusLibros' stamp: 'UNS 11/6/2023 20:20:42'!
TestCase subclass: #InputInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 20:20:39'!
createInputInterfacewithClientID: anUserID andPassword: aPassword


	|catalog userList|
	
	catalog := testObjectsFactory defaultCatalog.
	
	userList := testObjectsFactory userList.
	
	
	
	
	
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 20:20:55' overrides: 16961394!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'UNS 11/6/2023 20:21:54'!
userList
	
	^ Dictionary new
		at: 1 put: 'Password1'
		yourself ! !

!classDefinition: #InputInterface category: 'TusLibros' stamp: 'UNS 11/6/2023 20:23:02'!
Object subclass: #InputInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 20:22:59' prior: 50656613!
createInputInterfacewithClientID: anUserID andPassword: aPassword


	|catalog userList|
	
	catalog := testObjectsFactory defaultCatalog.
	
	userList := testObjectsFactory userList.
	
	^InputInterface with: catalog and: userList forUserID: anUserID andPassword: aPassword.
	
	
	
	
	
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 20:27:05' prior: 50656640!
createInputInterfacewithClientID: anUserID andPassword: aPassword


	|catalog userList|
	
	catalog := testObjectsFactory defaultCatalog.
	
	userList := testObjectsFactory userList.
	
	^InputInterface with: catalog and: userList.
	
	
	
	
	
			! !
!InputInterface class methodsFor: 'nil' stamp: 'UNS 11/6/2023 20:27:50'!
with: aCatalog and: anUserList

	^self new initializeWith: aCatalog and: anUserList! !

!classDefinition: #InputInterface category: 'TusLibros' stamp: 'UNS 11/6/2023 20:29:10'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InputInterface category: 'TusLibros' stamp: 'UNS 11/6/2023 20:29:11'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalog users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InputInterface methodsFor: 'nil' stamp: 'UNS 11/6/2023 20:29:09'!
initializeWith: aCatalog and: anUserList

	catalog := aCatalog.
	users := anUserList ! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 20:30:15' prior: 50656597!
test01CartCannotBeCreatedWithAnInvalidUserID

	|inputInterface|
	
	inputInterface := self createInputInterface
	
	
	
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 20:30:20' prior: 50656688!
test01CartCannotBeCreatedWithAnInvalidUserID

	|inputInterface|
	
	inputInterface := self createInputInterface.
	
	
	
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 20:30:32'!
createInputInterface


	|catalog userList|
	
	catalog := testObjectsFactory defaultCatalog.
	
	userList := testObjectsFactory userList.
	
	^InputInterface with: catalog and: userList.
	
	
	
	
	
			! !

!methodRemoval: InputInterfaceTest #createInputInterfacewithClientID:andPassword: stamp: 'UNS 11/6/2023 20:30:33'!
createInputInterfacewithClientID: anUserID andPassword: aPassword


	|catalog userList|
	
	catalog := testObjectsFactory defaultCatalog.
	
	userList := testObjectsFactory userList.
	
	^InputInterface with: catalog and: userList.
	
	
	
	
	
			!
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 20:32:35' prior: 50656695!
test01CartCannotBeCreatedWithAnInvalidUserID

	|inputInterface|
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ inputInterface createCartWithUserId: 20 andPassword: 'Password1']
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = inputInterface cannotCreateCartWithNotExistentUserID].	
	
			! !

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'UNS 11/6/2023 20:32:40'!
ERROR!
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 20:33:02' prior: 50656723!
test01CartCannotBeCreatedWithAnInvalidUserID

	|inputInterface|
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ InputInterface createCartWithUserId: 20 andPassword: 'Password1']
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface cannotCreateCartWithNotExistentUserID].	
	
			! !
!InputInterface class methodsFor: 'nil' stamp: 'UNS 11/6/2023 20:33:29'!
cannotCreateCartWithNotExistentUserID

	^'Cannot create cart with invalid user id'! !
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 20:33:34' prior: 50656756!
cannotCreateCartWithNotExistentUserID

	^'Cannot create cart with not existen user id'! !
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 20:33:34' prior: 50656762!
cannotCreateCartWithNotExistentUserID

	^'Cannot create cart with not existent user id'! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 20:33:46' prior: 50656742!
test01CartCannotBeCreatedWithAnInvalidUserID

	|inputInterface|
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ inputInterface createCartWithUserId: 20 andPassword: 'Password1']
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface cannotCreateCartWithNotExistentUserID].	
	
			! !

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'UNS 11/6/2023 20:33:48'!
ERROR!
!InputInterface methodsFor: 'nil' stamp: 'UNS 11/6/2023 20:35:06'!
createCartWithUserId: anUserId andPassword: aPassword

	^self error: self class cannotCreateCartWithNotExistentUserID! !

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'UNS 11/6/2023 20:35:08'!
PASSED!
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 20:35:53'!
test02CartCannotBeCreatedWithAnInvalidPassword

	|inputInterface|
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ inputInterface createCartWithUserId: 1 andPassword: 'Password10']
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface cannotCreateCartWithNotExistentUserID].	
	
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 20:36:00' prior: 50656803!
test02CartCannotBeCreatedWithAnInvalidPassword

	|inputInterface|
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ inputInterface createCartWithUserId: 1 andPassword: 'Password10']
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface cannotCreateCartWithInvalidPassword].	
	
			! !

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'UNS 11/6/2023 20:36:02'!
ERROR!
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 20:36:21'!
cannotCreateCartWithInvalidPassword

	^'Cannot create cart with invalid password'! !

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'UNS 11/6/2023 20:36:24'!
FAILURE!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 20:37:26' prior: 50656793!
createCartWithUserId: anUserId andPassword: aPassword

	self assertValidUserId: anUserId.
	self assertValidPassword: aPassword forUserId: anUserId! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 20:37:45'!
assertValidUserId: anUserId

	^users includes: anUserId ! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 20:38:35'!
assertValidPassword: aPassword forUserId: anUserId

	^(users at: anUserId) = aPassword! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 20:40:29' prior: 50656855!
assertValidUserId: anUserId

	(users includesKey: anUserId) ifFalse: [^self error: self class cannotCreateCartWithNotExistentUserID].! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 20:41:22' prior: 50656860!
assertValidPassword: aPassword forUserId: anUserId

	((users at: anUserId)= aPassword) ifFalse: [^self error: self class cannotCreateCartWithInvalidPassword]! !

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'UNS 11/6/2023 20:41:29'!
ERROR!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'UNS 11/6/2023 20:41:29'!
ERROR!

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'UNS 11/6/2023 20:41:31'!
ERROR!

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'UNS 11/6/2023 20:41:31'!
ERROR!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'UNS 11/6/2023 20:41:44'!
ERROR!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'UNS 11/6/2023 20:41:44'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'UNS 11/6/2023 20:42:22' prior: 50656628!
userList
	
	^ Dictionary with: 1 -> 'Password1'! !

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'UNS 11/6/2023 20:42:25'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'UNS 11/6/2023 20:42:26'!
PASSED!

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'UNS 11/6/2023 20:42:28'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'UNS 11/6/2023 20:42:28'!
PASSED!
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 20:46:27'!
test03CartCreatedSuccesfully

	|inputInterface|
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ inputInterface createCartWithUserId: 1 andPassword: 'Password1']
		raise: Error - MessageNotUnderstood
			! !

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'UNS 11/6/2023 20:46:28'!
PASSED!

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'UNS 11/6/2023 20:46:28'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'UNS 11/6/2023 20:46:28'!
PASSED!

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'UNS 11/6/2023 20:46:29'!
PASSED!
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 21:19:05' prior: 50656924!
test03CartCreatedSuccesfully

	|inputInterface cartID| 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: 1 andPassword: 'Password1']
		raise: Error - MessageNotUnderstood.
		
	self assert:  (inputInterface cartAt: cartID isEmpty).
	self assert:  (inputInterface userAt: cartID = 1)
			! !

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'UNS 11/6/2023 21:19:12'!
ERROR!

!classDefinition: #InputInterface category: 'TusLibros' stamp: 'UNS 11/6/2023 21:19:19'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalog users userForCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InputInterface category: 'TusLibros' stamp: 'UNS 11/6/2023 21:19:21'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalog users userForCartID cartForCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InputInterface methodsFor: 'initialization' stamp: 'UNS 11/6/2023 21:19:19' prior: 50656682!
initializeWith: aCatalog and: anUserList

	catalog := aCatalog.
	users := anUserList.
	userForCartID := Dictionary new.
	cartForCartID := Dictionary new.! !

!classDefinition: #InputInterface category: 'TusLibros' stamp: 'UNS 11/6/2023 21:19:57'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalog users userForCartID cartForCartID currentID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InputInterface methodsFor: 'initialization' stamp: 'UNS 11/6/2023 21:19:56' prior: 50656982!
initializeWith: aCatalog and: anUserList

	catalog := aCatalog.
	users := anUserList.
	currentID := 1.
	userForCartID := Dictionary new.
	cartForCartID := Dictionary new.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 21:21:55' prior: 50656847!
createCartWithUserId: anUserId andPassword: aPassword

	self assertValidUserId: anUserId.
	self assertValidPassword: aPassword forUserId: anUserId.
	
	cartForCartID put: anUserId at: currentID.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 21:23:23' prior: 50657008!
createCartWithUserId: anUserId andPassword: aPassword
	
	|cart|
	
	self assertValidUserId: anUserId.
	self assertValidPassword: aPassword forUserId: anUserId.
	
	cart := self createCart.
	currentID := currentID + 1.
	cartForCartID put: cart at: currentID.
	userForCartID put: anUserId at: currentID.
	
	^currentID
	! !
!InputInterface methodsFor: 'initialization' stamp: 'UNS 11/6/2023 21:23:29' prior: 50656999!
initializeWith: aCatalog and: anUserList

	catalog := aCatalog.
	users := anUserList.
	currentID := 0.
	userForCartID := Dictionary new.
	cartForCartID := Dictionary new.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 21:24:25' prior: 50657018!
createCartWithUserId: anUserId andPassword: aPassword
	
	|cart|
	
	self assertValidUserId: anUserId.
	self assertValidPassword: aPassword forUserId: anUserId.
	
	cart := self createCart.
	currentID := currentID + 1.
	cartForCartID at: currentID put: cart.
	userForCartID at: currentID put: anUserId.
	
	^currentID
	! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 21:25:49'!
createCart

	^Cart acceptingItemsOf: catalog ! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 21:26:26' prior: 50656948!
test03CartCreatedSuccesfully

	|inputInterface cartID| 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: 1 andPassword: 'Password1']
		raise: Error - MessageNotUnderstood.
		
	self assert:  ((inputInterface cartAt: cartID) isEmpty).
	self assert:  (inputInterface userAt: cartID = 1)
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 21:26:32' prior: 50657058!
test03CartCreatedSuccesfully

	|inputInterface cartID| 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: 1 andPassword: 'Password1']
		raise: Error - MessageNotUnderstood.
		
	self assert:  ((inputInterface cartAt: cartID) isEmpty).
	self assert:  ((inputInterface userAt: cartID) = 1)
			! !
!InputInterface methodsFor: 'nil' stamp: 'UNS 11/6/2023 21:26:47'!
cartAt: cartID

	^cartForCartID at: cartID! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 21:27:07'!
userAt: cartID

	^userForCartID at: cartID! !

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'UNS 11/6/2023 21:27:10'!
PASSED!

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'UNS 11/6/2023 21:27:10'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'UNS 11/6/2023 21:27:11'!
PASSED!

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'UNS 11/6/2023 21:27:11'!
PASSED!
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 21:38:59'!
test04CannotAddToCartWithAnInvalidID

	|inputInterface cartID| 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: 1 andPassword: 'Password1']
		raise: Error - MessageNotUnderstood.
		
	self 
		should: [ inputInterface addToCart: cartID aBook: testObjectsFactory itemSellByTheStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface cannotAddToCartWithAnInvalidCartID.]
			! !

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'UNS 11/6/2023 21:39:21'!
ERROR!
!InputInterface methodsFor: 'nil' stamp: 'UNS 11/6/2023 21:39:57'!
addToCart: cartID aBook: aBook

	^self error: self class cannotAddToCartWithAnInvalidCartID! !

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'UNS 11/6/2023 21:40:40'!
ERROR!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'UNS 11/6/2023 21:40:40'!
ERROR!
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 21:41:02'!
cannotAddToCartWithAnInvalidCartID

	^'Cannot add to cart with an invalid cart ID'! !

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'UNS 11/6/2023 21:41:04'!
PASSED!
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 21:48:12'!
test05AddBookToCartSuccesfullyListAddedBook

	|inputInterface cartID bookList| 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: 1 andPassword: 'Password1']
		raise: Error - MessageNotUnderstood.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface addToCart: cartID aBook: (testObjectsFactory itemSellByTheStore).
	
	self assert: bookList equals: inputInterface listCart: cartID.
			! !

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'UNS 11/6/2023 21:48:16'!
ERROR!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 21:51:44'!
assertInvalidCartId: cartID

	(cartForCartID includesKey: cartID) ifFalse: [ self error: self class cannotAddToCartWithAnInvalidCartID.]! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 21:56:34' prior: 50657131!
addToCart: cartID aBook: aBook

	|cart|
	
	self assertInvalidCartId: cartID.
	cart := cartForCartID at: cartID.
	
	cart add: aBook.
! !

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'UNS 11/6/2023 21:58:15'!
ERROR!
!InputInterfaceTest methodsFor: 'tests' stamp: 'UNS 11/6/2023 21:58:24' prior: 50657153!
test05AddBookToCartSuccesfullyListAddedBook

	|inputInterface cartID bookList| 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: 1 andPassword: 'Password1']
		raise: Error - MessageNotUnderstood.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface addToCart: cartID aBook: (testObjectsFactory itemSellByTheStore).
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			! !

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'UNS 11/6/2023 21:58:26'!
ERROR!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 21:58:33'!
listCart: cartID 
	self shouldBeImplemented.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 22:01:54'!
listCart

	 ^OrderedCollection with: 'Valid book'! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 22:02:04' prior: 50657223!
listCart

	 ^OrderedCollection with: 'validBook'! !

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'UNS 11/6/2023 22:02:19'!
ERROR!

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'UNS 11/6/2023 22:02:19'!
ERROR!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 22:03:26' prior: 50657218!
listCart: cartID 
	
		^OrderedCollection with: 'validBook'! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'UNS 11/6/2023 22:03:29' prior: 50657240!
listCart: cartID 
	
	^OrderedCollection with: 'validBook'! !

!methodRemoval: InputInterface #listCart stamp: 'UNS 11/6/2023 22:03:31'!
listCart

	 ^OrderedCollection with: 'validBook'!

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'UNS 11/6/2023 22:03:34'!
PASSED!

----SNAPSHOT----(7 November 2023 01:24:16) CuisUniversity-5981.image priorSource: 10365949!

----QUIT----(7 November 2023 01:25:11) CuisUniversity-5981.image priorSource: 10419438!

----STARTUP---- (7 November 2023 13:28:57) as /home/gonztepl/Desktop/Inge1 Ubuntu Image/linux64/Ej9 It3/CuisUniversity-5981.image!


!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'ght 11/7/2023 13:29:32'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'ght 11/7/2023 13:29:32'!
PASSED!

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'ght 11/7/2023 13:29:32'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 13:29:32'!
FAILURE!

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'ght 11/7/2023 13:29:32'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 13:29:32'!
FAILURE!

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'ght 11/7/2023 13:29:38'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'ght 11/7/2023 13:29:40'!
PASSED!

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'ght 11/7/2023 13:29:41'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 13:29:43'!
FAILURE!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 13:29:43'!
FAILURE!

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'ght 11/7/2023 13:29:46'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 13:29:53'!
FAILURE!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 13:29:53'!
FAILURE!

----SNAPSHOT----(7 November 2023 13:32:45) CuisUniversity-5981.image priorSource: 10419531!

----STARTUP---- (7 November 2023 15:02:27) as /home/gonztepl/Desktop/Inge1 Ubuntu Image/linux64/Ej9 It3/CuisUniversity-5981.image!


!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 15:02:30'!
FAILURE!

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'ght 11/7/2023 15:02:43'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'ght 11/7/2023 15:02:44'!
PASSED!

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'ght 11/7/2023 15:02:46'!
PASSED!

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'ght 11/7/2023 15:02:47'!
PASSED!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:03:37'!
anInvalidUserID

	^ 20! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:03:37' prior: 50656775!
test01CartCannotBeCreatedWithAnInvalidUserID

	|inputInterface|
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ inputInterface createCartWithUserId: self anInvalidUserID andPassword: 'Password1']
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface cannotCreateCartWithNotExistentUserID].	
	
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:04:28'!
aValidPassword

	^ 'Password1'! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:04:28' prior: 50657072!
test03CartCreatedSuccesfully

	|inputInterface cartID| 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: 1 andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
		
	self assert:  ((inputInterface cartAt: cartID) isEmpty).
	self assert:  ((inputInterface userAt: cartID) = 1)
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:04:28' prior: 50657195!
test05AddBookToCartSuccesfullyListAddedBook

	|inputInterface cartID bookList| 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: 1 andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface addToCart: cartID aBook: (testObjectsFactory itemSellByTheStore).
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:04:28' prior: 50657109!
test04CannotAddToCartWithAnInvalidID

	|inputInterface cartID| 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: 1 andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
		
	self 
		should: [ inputInterface addToCart: cartID aBook: testObjectsFactory itemSellByTheStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface cannotAddToCartWithAnInvalidCartID.]
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:04:28' prior: 50657346!
test01CartCannotBeCreatedWithAnInvalidUserID

	|inputInterface|
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ inputInterface createCartWithUserId: self anInvalidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface cannotCreateCartWithNotExistentUserID].	
	
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:04:49'!
anInvalidPassword

	^ 'Password10'! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:04:49' prior: 50656818!
test02CartCannotBeCreatedWithAnInvalidPassword

	|inputInterface|
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ inputInterface createCartWithUserId: 1 andPassword: self anInvalidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface cannotCreateCartWithInvalidPassword].	
	
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:05:25'!
aValidUserID

	^ 1! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:05:25' prior: 50657365!
test03CartCreatedSuccesfully

	|inputInterface cartID| 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
		
	self assert:  ((inputInterface cartAt: cartID) isEmpty).
	self assert:  ((inputInterface userAt: cartID) = 1)
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:05:25' prior: 50657458!
test03CartCreatedSuccesfully

	|inputInterface cartID| 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
		
	self assert:  ((inputInterface cartAt: cartID) isEmpty).
	self assert:  ((inputInterface userAt: cartID) = self aValidUserID)
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:05:25' prior: 50657380!
test05AddBookToCartSuccesfullyListAddedBook

	|inputInterface cartID bookList| 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface addToCart: cartID aBook: (testObjectsFactory itemSellByTheStore).
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:05:25' prior: 50657400!
test04CannotAddToCartWithAnInvalidID

	|inputInterface cartID| 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
		
	self 
		should: [ inputInterface addToCart: cartID aBook: testObjectsFactory itemSellByTheStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface cannotAddToCartWithAnInvalidCartID.]
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:05:25' prior: 50657439!
test02CartCannotBeCreatedWithAnInvalidPassword

	|inputInterface|
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ inputInterface createCartWithUserId: self aValidUserID andPassword: self anInvalidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface cannotCreateCartWithInvalidPassword].	
	
			! !

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'ght 11/7/2023 15:05:30'!
PASSED!

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'ght 11/7/2023 15:05:30'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'ght 11/7/2023 15:05:30'!
PASSED!

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'ght 11/7/2023 15:05:30'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 15:05:30'!
FAILURE!

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'ght 11/7/2023 15:05:30'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 15:05:30'!
FAILURE!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:07:09' prior: 50657420!
test01CartCannotBeCreatedWithAnInvalidUserID

	| inputInterface |
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ inputInterface createCartWithUserId: self anInvalidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface cannotCreateCartWithNotExistentUserID].	
	
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:07:15' prior: 50657529!
test02CartCannotBeCreatedWithAnInvalidPassword

	| inputInterface |
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ inputInterface createCartWithUserId: self aValidUserID andPassword: self anInvalidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface cannotCreateCartWithInvalidPassword].	
	
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:07:19' prior: 50657473!
test03CartCreatedSuccesfully

	| inputInterface cartID | 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
		
	self assert:  ((inputInterface cartAt: cartID) isEmpty).
	self assert:  ((inputInterface userAt: cartID) = self aValidUserID)
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:07:24' prior: 50657509!
test04CannotAddToCartWithAnInvalidID

	| inputInterface cartID | 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
		
	self 
		should: [ inputInterface addToCart: cartID aBook: testObjectsFactory itemSellByTheStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface cannotAddToCartWithAnInvalidCartID.]
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:07:28' prior: 50657489!
test05AddBookToCartSuccesfullyListAddedBook

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface addToCart: cartID aBook: (testObjectsFactory itemSellByTheStore).
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			! !
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 15:10:20'!
authenticationFailedWhenCreatingCartError

	^'Cannot create cart with user authentication failed'! !

!methodRemoval: InputInterface class #cannotCreateCartWithInvalidPassword stamp: 'ght 11/7/2023 15:10:26'!
cannotCreateCartWithInvalidPassword

	^'Cannot create cart with invalid password'!

!methodRemoval: InputInterface class #cannotCreateCartWithNotExistentUserID stamp: 'ght 11/7/2023 15:10:29'!
cannotCreateCartWithNotExistentUserID

	^'Cannot create cart with not existent user id'!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:10:40' prior: 50657570!
test01CartCannotBeCreatedWithAnInvalidUserID

	| inputInterface |
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ inputInterface createCartWithUserId: self anInvalidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface authenticationFailedWhenCreatingCartError].	
	
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:10:45' prior: 50657586!
test02CartCannotBeCreatedWithAnInvalidPassword

	| inputInterface |
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ inputInterface createCartWithUserId: self aValidUserID andPassword: self anInvalidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface authenticationFailedWhenCreatingCartError].	
	
			! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 15:11:02' prior: 50656866!
assertValidUserId: anUserId

	(users includesKey: anUserId) ifFalse: [^self error: self class authenticationFailedWhenCreatingCartError].! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 15:11:07' prior: 50656874!
assertValidPassword: aPassword forUserId: anUserId

	((users at: anUserId)= aPassword) ifFalse: [^self error: self class authenticationFailedWhenCreatingCartError]! !

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'ght 11/7/2023 15:11:14'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'ght 11/7/2023 15:11:16'!
PASSED!

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'ght 11/7/2023 15:11:17'!
PASSED!

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'ght 11/7/2023 15:11:19'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 15:11:21'!
FAILURE!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 15:11:21'!
FAILURE!

----SNAPSHOT----(7 November 2023 15:11:29) CuisUniversity-5981.image priorSource: 10421333!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:13:22' prior: 50657618!
test04CannotAddToCartWithAnInvalidID

	| inputInterface cartID | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
		
	self 
		should: [ inputInterface addToCart: cartID aBook: testObjectsFactory itemSellByTheStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface cannotAddToCartWithAnInvalidCartID.]
			! !

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 15:13:23'!
FAILURE!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:19:09' prior: 50657750!
test04CannotAddToCartWithAnInvalidID

	| inputInterface cartID | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
		
	self 
		should: [ inputInterface addToCart: cartID aBook: testObjectsFactory itemSellByTheStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface cannotAddToCartWithAnInvalidCartID.]
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:19:13' prior: 50657772!
test04CannotAddToCartWithAnInvalidID

	| inputInterface cartID | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
		
	self 
		should: [ inputInterface addToCart: -1 aBook: testObjectsFactory itemSellByTheStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface cannotAddToCartWithAnInvalidCartID.]
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:19:27' prior: 50657790!
test04CannotAddToCartWithAnInvalidID

	| inputInterface | 
	
	inputInterface := self createInputInterface.
	
	 inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
		
	self 
		should: [ inputInterface addToCart: -1 aBook: testObjectsFactory itemSellByTheStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface cannotAddToCartWithAnInvalidCartID.]
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:19:52'!
anInvalidCartID

	^ -1! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:19:52' prior: 50657808!
test04CannotAddToCartWithAnInvalidID

	| inputInterface | 
	
	inputInterface := self createInputInterface.
	
	 inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
		
	self 
		should: [ inputInterface addToCart: self anInvalidCartID aBook: testObjectsFactory itemSellByTheStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface cannotAddToCartWithAnInvalidCartID.]
			! !

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 15:19:56'!
PASSED!

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'ght 11/7/2023 15:19:56'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'ght 11/7/2023 15:19:56'!
PASSED!

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'ght 11/7/2023 15:19:56'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 15:19:56'!
PASSED!

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'ght 11/7/2023 15:19:56'!
PASSED!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 15:22:20' prior: 50657829!
test04CannotAddToCartWithAnInvalidID

	| inputInterface | 
	
	inputInterface := self createInputInterface.
	
	 inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
		
	self 
		should: [ inputInterface addToCart: self anInvalidCartID aBook: testObjectsFactory itemSellByTheStore]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface cannotAddToCartWithAnInvalidCartID.]
			! !

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 15:22:21'!
PASSED!

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'ght 11/7/2023 15:22:21'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'ght 11/7/2023 15:22:21'!
PASSED!

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'ght 11/7/2023 15:22:21'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 15:22:21'!
PASSED!

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'ght 11/7/2023 15:22:21'!
PASSED!

----SNAPSHOT----(7 November 2023 15:22:28) CuisUniversity-5981.image priorSource: 10435053!

----STARTUP---- (7 November 2023 17:39:59) as /home/gonztepl/Desktop/Inge1 Ubuntu Image/linux64/Ej9 It3/CuisUniversity-5981.image!

!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 17:47:35'!
addToCart: cartID aQuantity: aQuantity of: aBook

	| cart |
	
	self assertInvalidCartId: cartID.
	cart := cartForCartID at: cartID.
	
	cart add: aBook of: aQuantity.
! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 17:48:08' prior: 50657184!
addToCart: cartID aBook: aBook

	| cart |
	
	self assertInvalidCartId: cartID.
	cart := cartForCartID at: cartID.
	
	cart add: aBook.
! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 17:48:54' prior: 50657923!
addToCart: cartID aBook: aBook

	self addToCart: cartID aQuantity: 1 of: aBook! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 17:51:06'!
add: aQuantity of: aBook toCart: cartID 

	| cart |
	
	self assertInvalidCartId: cartID.
	cart := cartForCartID at: cartID.
	
	cart add: aQuantity of: aBook .
! !

!methodRemoval: InputInterface #addToCart:aQuantity:of: stamp: 'ght 11/7/2023 17:51:09'!
addToCart: cartID aQuantity: aQuantity of: aBook

	| cart |
	
	self assertInvalidCartId: cartID.
	cart := cartForCartID at: cartID.
	
	cart add: aBook of: aQuantity.
!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 17:52:14'!
add: aBook toCart: cartID

	self add: 1 of: aBook toCart: cartID.! !

!methodRemoval: InputInterface #addToCart:aBook: stamp: 'ght 11/7/2023 17:52:18'!
addToCart: cartID aBook: aBook

	self addToCart: cartID aQuantity: 1 of: aBook!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 17:53:33' prior: 50657868!
test04CannotAddToCartWithAnInvalidID

	| inputInterface | 
	
	inputInterface := self createInputInterface.
	
	 inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
		
	self 
		should: [ inputInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart:  self anInvalidCartID ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface cannotAddToCartWithAnInvalidCartID.]
			! !

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 17:53:35'!
PASSED!

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'ght 11/7/2023 17:53:35'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'ght 11/7/2023 17:53:35'!
PASSED!

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'ght 11/7/2023 17:53:35'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 17:53:35'!
PASSED!

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'ght 11/7/2023 17:53:35'!
ERROR!

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'ght 11/7/2023 17:53:35'!
ERROR!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 17:54:21' prior: 50657638!
test05AddBookToCartSuccesfullyListAddedBook

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			! !

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'ght 11/7/2023 17:54:23'!
PASSED!

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'ght 11/7/2023 17:54:24'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'ght 11/7/2023 17:54:24'!
PASSED!

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'ght 11/7/2023 17:54:24'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 17:54:24'!
PASSED!

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'ght 11/7/2023 17:54:24'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'ght 11/7/2023 17:54:37'!
PASSED!

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'ght 11/7/2023 17:54:44'!
PASSED!

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'ght 11/7/2023 17:54:44'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'ght 11/7/2023 17:54:44'!
PASSED!

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'ght 11/7/2023 17:54:44'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 17:54:44'!
PASSED!

!testRun: #InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'ght 11/7/2023 17:54:44'!
PASSED!

----SNAPSHOT----(7 November 2023 17:54:47) CuisUniversity-5981.image priorSource: 10440198!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 18:04:18'!
test05CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			! !

!methodRemoval: InputInterfaceTest #test05AddBookToCartSuccesfullyListAddedBook stamp: 'ght 11/7/2023 18:04:18'!
test05AddBookToCartSuccesfullyListAddedBook

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 18:04:45'!
test05CannotListItemsForInvalidCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 18:04:52'!
test06CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			! !

!methodRemoval: InputInterfaceTest #test05CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 18:04:52'!
test05CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			!
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 18:07:28'!
invalidCartIDError

	^'There is no cart with that ID'! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 18:07:54' prior: 50658175!
test05CannotListItemsForInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.
	
	
		
		self should: [ inputInterface createCartWithUserId: self aValidUserID andPassword: self anInvalidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 18:11:36' prior: 50658194!
test06CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			! !

!testRun: #InputInterfaceTest #test06CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 18:11:41'!
PASSED!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 18:11:55' prior: 50658239!
test05CannotListItemsForInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.
	
	
		
	self should: [ inputInterface createCartWithUserId: self aValidUserID andPassword: self anInvalidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 18:12:07' prior: 50658276!
test05CannotListItemsForInvalidCart

	| inputInterface cartID | 
	
	inputInterface := self createInputInterface.	
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	self should: [ inputInterface listCart: self anInvalidCartID]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 18:12:19' prior: 50658291!
test05CannotListItemsForInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
	
	inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	self should: [ inputInterface listCart: self anInvalidCartID]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	
			! !

!testRun: #InputInterfaceTest #test05CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 18:12:25'!
FAILURE!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 18:13:19'!
assertValidCartId: cartID

	(cartForCartID includesKey: cartID) ifFalse: [ self error: self class cannotAddToCartWithAnInvalidCartID.]! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 18:13:19' prior: 50657937!
add: aQuantity of: aBook toCart: cartID 

	| cart |
	
	self assertValidCartId: cartID.
	cart := cartForCartID at: cartID.
	
	cart add: aQuantity of: aBook .
! !

!methodRemoval: InputInterface #assertInvalidCartId: stamp: 'ght 11/7/2023 18:13:19'!
assertInvalidCartId: cartID

	(cartForCartID includesKey: cartID) ifFalse: [ self error: self class cannotAddToCartWithAnInvalidCartID.]!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 18:13:56' prior: 50657246!
listCart: cartID 
	
	self assertValidCartId: cartID.
	^OrderedCollection with: 'validBook'! !
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 18:14:58' prior: 50658234!
invalidCartIDError

	^'Cannot operate with an invalid cart ID'! !

!methodRemoval: InputInterface class #cannotAddToCartWithAnInvalidCartID stamp: 'ght 11/7/2023 18:15:05'!
cannotAddToCartWithAnInvalidCartID

	^'Cannot add to cart with an invalid cart ID'!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 18:15:18' prior: 50658328!
assertValidCartId: cartID

	(cartForCartID includesKey: cartID) ifFalse: [ self error: self class invalidCartIDError.]! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 18:15:25' prior: 50657964!
test04CannotAddToCartWithAnInvalidID

	| inputInterface | 
	
	inputInterface := self createInputInterface.
	
	 inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
		
	self 
		should: [ inputInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart:  self anInvalidCartID ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface invalidCartIDError.]
			! !

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'ght 11/7/2023 18:15:28'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'ght 11/7/2023 18:15:29'!
PASSED!

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'ght 11/7/2023 18:15:30'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 18:15:32'!
PASSED!

!testRun: #InputInterfaceTest #test05CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 18:15:33'!
PASSED!

!testRun: #InputInterfaceTest #test06CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 18:15:34'!
PASSED!

----SNAPSHOT----(7 November 2023 18:16:39) CuisUniversity-5981.image priorSource: 10447417!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:09:47' prior: 50658254!
test06CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface add: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			! !

!testRun: #InputInterfaceTest #test06CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:09:49'!
PASSED!

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'ght 11/7/2023 19:09:49'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'ght 11/7/2023 19:09:49'!
PASSED!

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'ght 11/7/2023 19:09:49'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 19:09:49'!
PASSED!

!testRun: #InputInterfaceTest #test05CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 19:09:49'!
PASSED!

!testRun: #InputInterfaceTest #test06CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:09:49'!
PASSED!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:10:06' prior: 50658420!
test06CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface add: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:10:09' prior: 50658463!
test06CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface add: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:10:33' prior: 50658481!
test06CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface add: 1testObjectsFactory itemSellByTheStore toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			! !

!testRun: #InputInterfaceTest #test06CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:10:33'!
ERROR!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:10:37' prior: 50658499!
test06CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	inputInterface add: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			! !

!testRun: #InputInterfaceTest #test06CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:10:38'!
PASSED!

!testRun: #InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'ght 11/7/2023 19:10:38'!
PASSED!

!testRun: #InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'ght 11/7/2023 19:10:38'!
PASSED!

!testRun: #InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'ght 11/7/2023 19:10:38'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 19:10:38'!
PASSED!

!testRun: #InputInterfaceTest #test05CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 19:10:38'!
PASSED!

!testRun: #InputInterfaceTest #test06CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:10:38'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'ght 11/7/2023 19:10:50'!
itemSellByTheStore2
	
	^ 'validBook2'! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:11:17' prior: 50658521!
test06CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	inputInterface add: testObjectsFactory itemSellByTheStore toCart: cartID.
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID)
			! !

!testRun: #InputInterfaceTest #test06CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:11:19'!
ERROR!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:11:43' prior: 50658569!
test06CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	inputInterface add: testObjectsFactory itemSellByTheStore toCart: cartID.
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID).
	self assert: 2 equals: bookList size.
			! !

!testRun: #InputInterfaceTest #test06CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:11:44'!
ERROR!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:17:46'!
test01CannotCreateCartWithAnInvalidUserID

	| inputInterface |
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ inputInterface createCartWithUserId: self anInvalidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface authenticationFailedWhenCreatingCartError].	
	
			! !

!methodRemoval: InputInterfaceTest #test01CartCannotBeCreatedWithAnInvalidUserID stamp: 'ght 11/7/2023 19:17:46'!
test01CartCannotBeCreatedWithAnInvalidUserID

	| inputInterface |
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ inputInterface createCartWithUserId: self anInvalidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface authenticationFailedWhenCreatingCartError].	
	
			!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:18:11'!
test02CannotCreateCartWithAnInvalidPassword

	| inputInterface |
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ inputInterface createCartWithUserId: self aValidUserID andPassword: self anInvalidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface authenticationFailedWhenCreatingCartError].	
	
			! !

!methodRemoval: InputInterfaceTest #test02CartCannotBeCreatedWithAnInvalidPassword stamp: 'ght 11/7/2023 19:18:11'!
test02CartCannotBeCreatedWithAnInvalidPassword

	| inputInterface |
	
	inputInterface := self createInputInterface.
	
	self 
		should: [ inputInterface createCartWithUserId: self aValidUserID andPassword: self anInvalidPassword]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface authenticationFailedWhenCreatingCartError].	
	
			!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:18:43'!
test03CartIsCreatedSuccesfullyWhenUsingValidClient

	| inputInterface cartID | 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
		
	self assert:  ((inputInterface cartAt: cartID) isEmpty).
	self assert:  ((inputInterface userAt: cartID) = self aValidUserID)
			! !

!methodRemoval: InputInterfaceTest #test03CartCreatedSuccesfully stamp: 'ght 11/7/2023 19:18:43'!
test03CartCreatedSuccesfully

	| inputInterface cartID | 
	
	inputInterface := self createInputInterface.
	
	self
		shouldnt: [ cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword]
		raise: Error - MessageNotUnderstood.
		
	self assert:  ((inputInterface cartAt: cartID) isEmpty).
	self assert:  ((inputInterface userAt: cartID) = self aValidUserID)
			!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:19:29'!
test04CannotAddItemToInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.
	
	 inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
		
	self 
		should: [ inputInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart:  self anInvalidCartID ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface invalidCartIDError.]
			! !

!methodRemoval: InputInterfaceTest #test04CannotAddToCartWithAnInvalidID stamp: 'ght 11/7/2023 19:19:29'!
test04CannotAddToCartWithAnInvalidID

	| inputInterface | 
	
	inputInterface := self createInputInterface.
	
	 inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
		
	self 
		should: [ inputInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart:  self anInvalidCartID ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface invalidCartIDError.]
			!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:19:50'!
test08CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	inputInterface add: testObjectsFactory itemSellByTheStore toCart: cartID.
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID).
	self assert: 2 equals: bookList size.
			! !

!methodRemoval: InputInterfaceTest #test06CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:19:50'!
test06CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	inputInterface add: testObjectsFactory itemSellByTheStore toCart: cartID.
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID).
	self assert: 2 equals: bookList size.
			!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:19:57'!
test07CannotListItemsForInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
	
	inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	self should: [ inputInterface listCart: self anInvalidCartID]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	
			! !

!methodRemoval: InputInterfaceTest #test05CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 19:19:57'!
test05CannotListItemsForInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
	
	inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	self should: [ inputInterface listCart: self anInvalidCartID]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	
			!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:22:51'!
test05AnItemCanBeAddedToValidCart

	| inputInterface cartID | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
		
	self 
		shouldnt: [ inputInterface add: testObjectsFactory itemSellByTheStore toCart:  cartID]
		raise: Error - MessageNotUnderstood 
		
			! !

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/7/2023 19:22:53'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/7/2023 19:22:53'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/7/2023 19:22:53'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/7/2023 19:22:53'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/7/2023 19:22:53'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/7/2023 19:22:53'!
PASSED!

!testRun: #InputInterfaceTest #test07CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 19:22:53'!
PASSED!

!testRun: #InputInterfaceTest #test08CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:22:53'!
ERROR!

!testRun: #InputInterfaceTest #test08CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:22:53'!
ERROR!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/7/2023 19:22:57'!
PASSED!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 19:23:16' prior: 50658352!
listCart: cartID 
	
	"self assertValidCartId: cartID.
	^(cartForCartID at: cartID) "! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:24:21' prior: 50658753!
test08CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	inputInterface add: testObjectsFactory itemSellByTheStore toCart: cartID.
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID).
	self assert: 2 equals: (inputInterface listCart: cartID) size.
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:25:19' prior: 50658833!
test05AnItemCanBeAddedToValidCart

	| inputInterface cartID | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
		
	self 
		shouldnt: [ inputInterface add: testObjectsFactory itemSellByTheStore toCart:  cartID]
		raise: Error - MessageNotUnderstood.
		
		
		
			
	! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:25:52'!
test06CannotListItemsForInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
	
	inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	self should: [ inputInterface listCart: self anInvalidCartID]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	
			! !

!methodRemoval: InputInterfaceTest #test07CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 19:25:52'!
test07CannotListItemsForInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
	
	inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	self should: [ inputInterface listCart: self anInvalidCartID]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	
			!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 19:25:58'!
test07CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	inputInterface add: testObjectsFactory itemSellByTheStore toCart: cartID.
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID).
	self assert: 2 equals: (inputInterface listCart: cartID) size.
			! !

!methodRemoval: InputInterfaceTest #test08CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:25:58'!
test08CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	inputInterface add: testObjectsFactory itemSellByTheStore toCart: cartID.
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID).
	self assert: 2 equals: (inputInterface listCart: cartID) size.
			!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/7/2023 19:26:04'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/7/2023 19:26:05'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/7/2023 19:26:07'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/7/2023 19:26:08'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/7/2023 19:26:09'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 19:26:10'!
FAILURE!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 19:26:10'!
FAILURE!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 19:26:20'!
FAILURE!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 19:26:41' prior: 50658883!
listCart: cartID 
	
	self assertValidCartId: cartID.
	"^(cartForCartID at: cartID) "! !

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 19:26:42'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/7/2023 19:26:42'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/7/2023 19:26:42'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/7/2023 19:26:42'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/7/2023 19:26:42'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/7/2023 19:26:42'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 19:26:42'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:26:42'!
ERROR!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:26:42'!
ERROR!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 19:26:46'!
PASSED!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 19:30:27'!
itemsFor: aCart

	! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 19:30:52' prior: 50659037!
listCart: cartID 
	
	self assertValidCartId: cartID.
	^self itemsFor: (cartForCartID at: cartID).! !

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 19:31:06'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/7/2023 19:31:06'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/7/2023 19:31:06'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/7/2023 19:31:06'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/7/2023 19:31:06'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/7/2023 19:31:06'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 19:31:06'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:31:06'!
ERROR!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:31:06'!
ERROR!

----End fileIn of /home/gonztepl/Desktop/Inge1 Ubuntu Image/linux64/Ej9 It3/Packages/TerseGuide.pck.st----!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 19:36:54' prior: 50659078!
itemsFor: aCart

	| listItemsForACart |
	
	listItemsForACart := OrderedCollection new.
	
	catalog do: [:item | 		(aCart includes: item) 
					ifTrue: [ listItemsForACart add: item] ].
				
	^listItemsForACart! !

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:37:08'!
ERROR!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:37:22'!
ERROR!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:37:36'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'ght 11/7/2023 19:38:06' prior: 50656465!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		at: self itemSellByTheStore2 put: self itemSellByTheStorePrice2;
		yourself ! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'ght 11/7/2023 19:38:17'!
itemSellByTheStorePrice2
	
	^20! !

aCart!

^listItemsForACart!

^listItemsForACart!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 19:46:44' prior: 50662041!
itemsFor: aCart

	| listItemsForACart |
	
	listItemsForACart := OrderedCollection new.
	
	catalog inject: listItemsForACart into: [:item | 		aCart includes: item ; yourself].
				
	^listItemsForACart! !

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 19:46:56'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:47:14'!
ERROR!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 19:48:01' prior: 50662077!
itemsFor: aCart

	| listItemsForACart |
	
	listItemsForACart := OrderedCollection new.
	
	catalog inject: listItemsForACart into: [:item | 		aCart includes: item].
				
	^listItemsForACart! !

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:48:14'!
ERROR!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 19:52:20' prior: 50662094!
itemsFor: aCart

	| listItemsForACart |
	
	listItemsForACart := OrderedCollection new.
	
	catalog do: [:item | 	(aCart occurrencesOf: item) timesRepeat: [listItemsForACart add: item].]
				
	^listItemsForACart! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 19:52:53' prior: 50662107!
itemsFor: aCart

	| listItemsForACart |
	
	listItemsForACart := OrderedCollection new.
	
	catalog do: [:item | 
		(aCart occurrencesOf: item) 	timesRepeat:
		[listItemsForACart add: item].]
				
	^listItemsForACart! !

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 19:53:11'!
ERROR!

aCart!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:01:15' prior: 50662117!
itemsFor: aCart

	| listItemsForACart |
	
	listItemsForACart := OrderedCollection new.
	
	catalog do: [:item | 
		(aCart occurrencesOf: item) 	timesRepeat:
		[listItemsForACart add: item].]
				
	^listItemsForACart.! !

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:01:17'!
ERROR!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:01:28'!
ERROR!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:01:41'!
ERROR!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:04:24' prior: 50662131!
itemsFor: aCart

	aCart items copy.! !

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:04:50'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'ght 11/7/2023 20:05:10'!
items

	^items ! !

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:05:14'!
FAILURE!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:05:43' prior: 50659082!
listCart: cartID 
	
	self assertValidCartId: cartID.
	self itemsFor: (cartForCartID at: cartID).! !

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:05:46'!
FAILURE!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:06:14' prior: 50662152!
itemsFor: aCart

	^aCart items copy.! !

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:06:16'!
FAILURE!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:06:25' prior: 50662167!
listCart: cartID 
	
	self assertValidCartId: cartID.
	^self itemsFor: (cartForCartID at: cartID).! !

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:06:27'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/7/2023 20:06:27'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/7/2023 20:06:27'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/7/2023 20:06:27'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/7/2023 20:06:27'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/7/2023 20:06:27'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 20:06:27'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:06:27'!
PASSED!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 20:07:11' prior: 50658960!
test07CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	inputInterface add: testObjectsFactory itemSellByTheStore toCart: cartID.
	inputInterface add: testObjectsFactory itemSellByTheStore toCart: cartID.
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID).
	self assert: 3 equals: (inputInterface listCart: cartID) size.
			! !

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:07:12'!
FAILURE!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 20:07:42' prior: 50662221!
test07CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	inputInterface add: testObjectsFactory itemSellByTheStore toCart: cartID.
	inputInterface add: testObjectsFactory itemSellByTheStore toCart: cartID.
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID).
	self assert: 3 equals: (inputInterface listCart: cartID) size.
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 20:07:59' prior: 50662251!
test07CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	inputInterface add: 2 of: testObjectsFactory itemSellByTheStore toCart: cartID.
	
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID).
	self assert: 3 equals: (inputInterface listCart: cartID) size.
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 20:08:03' prior: 50662279!
test07CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	inputInterface add: 2 of: testObjectsFactory itemSellByTheStore toCart: cartID.	
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID).
	self assert: 3 equals: (inputInterface listCart: cartID) size.
			! !

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:08:05'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/7/2023 20:08:05'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/7/2023 20:08:05'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/7/2023 20:08:05'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/7/2023 20:08:05'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/7/2023 20:08:05'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 20:08:05'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:08:05'!
PASSED!

----SNAPSHOT----(7 November 2023 20:08:14) CuisUniversity-5981.image priorSource: 10456504!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 20:10:14'!
test08CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	inputInterface add: 2 of: testObjectsFactory itemSellByTheStore toCart: cartID.	
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID).
	self assert: 3 equals: (inputInterface listCart: cartID) size.
			! !

!testRun: #InputInterfaceTest #test08CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!testRun: #InputInterfaceTest #test08CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:10:14'!
PASSED!

!methodRemoval: InputInterfaceTest #test08CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:10:22'!
test08CanListItemsForSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	inputInterface add: 2 of: testObjectsFactory itemSellByTheStore toCart: cartID.	
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID).
	self assert: 3 equals: (inputInterface listCart: cartID) size.
			!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:10:24'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:10:26'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/7/2023 20:10:26'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/7/2023 20:10:26'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/7/2023 20:10:26'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/7/2023 20:10:26'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/7/2023 20:10:26'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 20:10:26'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:10:26'!
PASSED!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 20:10:33'!
test08CannotCheckoutAnInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
	
	inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	self should: [ inputInterface listCart: self anInvalidCartID]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 20:11:20' prior: 50662524!
test08CannotCheckoutAnInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
	
	self should: [ inputInterface checkout: self anInvalidCartID]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	
			! !

!testRun: #InputInterfaceTest #test08CannotCheckoutAnInvalidCart stamp: 'ght 11/7/2023 20:11:22'!
ERROR!
!InputInterface methodsFor: 'checkout' stamp: 'ght 11/7/2023 20:11:32'!
checkout: aRenameMe1 
	self shouldBeImplemented.! !

!methodRemoval: InputInterface #checkout: stamp: 'ght 11/7/2023 20:12:15'!
checkout: aRenameMe1 
	self shouldBeImplemented.!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:12:55'!
checkoutCartFor: aCartID 
	
	self assertValidCartId: aCartID.! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 20:12:58' prior: 50662541!
test08CannotCheckoutAnInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
	
	self should: [ inputInterface checkoutCartFor: self anInvalidCartID]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	
			! !

!testRun: #InputInterfaceTest #test08CannotCheckoutAnInvalidCart stamp: 'ght 11/7/2023 20:12:58'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/7/2023 20:12:58'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/7/2023 20:12:58'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/7/2023 20:12:58'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/7/2023 20:12:58'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/7/2023 20:12:58'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 20:12:58'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:12:58'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutAnInvalidCart stamp: 'ght 11/7/2023 20:12:58'!
PASSED!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:13:39'!
checkoutCart: aCartID 
	
	self assertValidCartId: aCartID.! !
!InputInterfaceTest methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:13:39' prior: 50662572!
test08CannotCheckoutAnInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
	
	self should: [ inputInterface checkoutCart: self anInvalidCartID]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	
			! !

!methodRemoval: InputInterface #checkoutCartFor: stamp: 'ght 11/7/2023 20:13:39'!
checkoutCartFor: aCartID 
	
	self assertValidCartId: aCartID.!

!testRun: #InputInterfaceTest #test08CannotCheckoutAnInvalidCart stamp: 'ght 11/7/2023 20:13:42'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/7/2023 20:13:42'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/7/2023 20:13:42'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/7/2023 20:13:42'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/7/2023 20:13:42'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/7/2023 20:13:42'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 20:13:42'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:13:42'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutAnInvalidCart stamp: 'ght 11/7/2023 20:13:42'!
PASSED!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 20:14:05'!
test09CanCheckoutSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	inputInterface add: 2 of: testObjectsFactory itemSellByTheStore toCart: cartID.	
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
	self assert: bookList equals: (inputInterface listCart: cartID).
	self assert: 3 equals: (inputInterface listCart: cartID) size.
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 20:16:30' prior: 50662673!
test09CanCheckoutSucessfullyCreatedCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	
	inputInterface add: 2 of: testObjectsFactory itemSellByTheStore toCart: cartID.	
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
	self shouldnt: [ inputInterface checkoutCart: cartID]
	      raise: Error - MessageNotUnderstood.
	    
	
	self assert: bookList equals: (inputInterface listCart: cartID).
	self assert: 3 equals: (inputInterface listCart: cartID) size.
			! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:16:51' prior: 50662177!
itemsFor: aCart

	^aCart items.! !
!Cart methodsFor: 'queries' stamp: 'ght 11/7/2023 20:16:57' prior: 50662159!
items

	^items copy! !

!testRun: #InputInterfaceTest #test09CanCheckoutSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:17:00'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/7/2023 20:17:00'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/7/2023 20:17:00'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/7/2023 20:17:00'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/7/2023 20:17:00'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/7/2023 20:17:00'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/7/2023 20:17:00'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:17:00'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutAnInvalidCart stamp: 'ght 11/7/2023 20:17:00'!
PASSED!

!testRun: #InputInterfaceTest #test09CanCheckoutSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:17:00'!
PASSED!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 20:23:01' prior: 50662699!
test09CanCheckoutSucessfullyCreatedCart

	| inputInterface cartID bookList bookListTotal | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	
	inputInterface add: 2 of: testObjectsFactory itemSellByTheStore toCart: cartID.	
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
 	bookListTotal :=  	2* testObjectsFactory itemSellByTheStorePrice +  testObjectsFactory itemSellByTheStorePrice.
	
	self assert: bookListTotal equals: (inputInterface checkoutCart: cartID).
			! !

!testRun: #InputInterfaceTest #test09CanCheckoutSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:23:02'!
FAILURE!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:24:01' prior: 50662617!
checkoutCart: aCartID 
	
	self assertValidCartId: aCartID.
	
	 ! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:24:26' prior: 50662186!
listCart: cartID 
	
	self assertValidCartId: cartID.
	^self itemsFor: (self cartAt: cartID).! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:24:49' prior: 50662810!
listCart: cartID 
	
	self assertValidCartId: cartID.
	^self itemsFor: (self cartAt: cartID).! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:25:28' prior: 50662804!
checkoutCart: cartID 
	
	self assertValidCartId: cartID.
	
	^(self cartAt: cartID) checkOut.
	
	 ! !

!testRun: #InputInterfaceTest #test09CanCheckoutSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:25:30'!
ERROR!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 20:27:25' prior: 50662772!
test09CanCheckoutSucessfullyCreatedCart

	| inputInterface cartID bookList bookListTotal cashier | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	bookListTotal :=  	2* testObjectsFactory itemSellByTheStorePrice +  testObjectsFactory itemSellByTheStorePrice.
	
	inputInterface add: 2 of: testObjectsFactory itemSellByTheStore toCart: cartID.	
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
 	
	
	self assert: bookListTotal equals: (inputInterface checkoutCart: cartID).
			! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:37:03'!
checkoutCart: cartID  usingCreditCard: creditCardNumber ownedByClient: clientID expiring: monthOfYear
	
	self assertValidCartId: cartID.
	
	^(self cartAt: cartID) checkOut.
	
	 ! !

!methodRemoval: InputInterface #checkoutCart: stamp: 'ght 11/7/2023 20:37:07'!
checkoutCart: cartID 
	
	self assertValidCartId: cartID.
	
	^(self cartAt: cartID) checkOut.
	
	 !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 20:37:09' prior: 50662623!
test08CannotCheckoutAnInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
	
	self should: [ inputInterface checkoutCart: self anInvalidCartID 
		                                    usingCreditCard: testObjectsFactory notExpiredCreditCard 
		                                    ownedByClient: self aValidUserID 
		                                    expiring: testObjectsFactory today
		]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	
			! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:48:26' prior: 50662863!
checkoutCart: cartID  usingCreditCard: creditCard ownedByClient: clientID expiring: aMonthOfYear
	
	self assertValidCartId: cartID.
	
	Cashier toCheckout: cartID 
	              charging: creditCard 
	              throught: self 
	              on: aMonthOfYear 
	              registeringOn: self.
	             
	
	^(self cartAt: cartID) checkOut.
	
	 ! !

Object subclass: #InputInterface
	instanceVariableNames: 'catalog users merchantProcessor userForCartID cartForCartID currentID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InputInterface category: 'TusLibros' stamp: 'ght 11/7/2023 20:49:08'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalog users merchantProcessor userForCartID cartForCartID currentID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:49:30' prior: 50662900!
checkoutCart: cartID  usingCreditCard: creditCard ownedByClient: clientID expiring: aMonthOfYear
	
	self assertValidCartId: cartID.
	
	Cashier toCheckout: cartID 
	              charging: creditCard 
	              throught: merchantProcessor 
	              on: aMonthOfYear 
	              registeringOn: self.
	             
	
	^(self cartAt: cartID) checkOut.
	
	 ! !

Object subclass: #InputInterface
	instanceVariableNames: 'catalog users merchantProcessor salesBook userForCartID cartForCartID currentID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InputInterface category: 'TusLibros' stamp: 'ght 11/7/2023 20:50:33'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalog users merchantProcessor salesBook userForCartID cartForCartID currentID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:53:15' prior: 50662930!
checkoutCart: cartID  usingCreditCard: creditCard ownedByClient: clientID expiring: aMonthOfYear
	
	| cashier |
	
	self assertValidCartId: cartID.
	
	cashier := Cashier toCheckout: cartID 
	              charging: creditCard 
	              throught: merchantProcessor 
	              on: aMonthOfYear 
	              registeringOn: self.
	             
	
	^cashier checkOut.
	
	 ! !

!testRun: #InputInterfaceTest #test08CannotCheckoutAnInvalidCart stamp: 'ght 11/7/2023 20:53:32'!
PASSED!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:53:37' prior: 50662961!
checkoutCart: cartID  usingCreditCard: creditCard ownedByClient: clientID expiring: aMonthOfYear
	
	| cashier |
	
	self assertValidCartId: cartID.
	
	cashier := Cashier toCheckout: cartID 
	              charging: creditCard 
	              throught: merchantProcessor 
	              on: aMonthOfYear 
	              registeringOn: self.
	             
	
	cashier checkOut.
	
	 ! !

!testRun: #InputInterfaceTest #test08CannotCheckoutAnInvalidCart stamp: 'ght 11/7/2023 20:53:40'!
PASSED!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:53:42' prior: 50662980!
checkoutCart: cartID  usingCreditCard: creditCard ownedByClient: clientID expiring: aMonthOfYear
	
	| cashier |
	
	self assertValidCartId: cartID.
	
	cashier := Cashier toCheckout: cartID 
	              charging: creditCard 
	              throught: merchantProcessor 
	              on: aMonthOfYear 
	              registeringOn: self.
	             
	
	^cashier checkOut.
	
	 ! !

!testRun: #InputInterfaceTest #test09CanCheckoutSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:53:44'!
ERROR!

!testRun: #InputInterfaceTest #test09CanCheckoutSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:53:44'!
ERROR!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 20:55:51' prior: 50662834!
test09CanCheckoutSucessfullyCreatedCart

	| inputInterface cartID bookList bookListTotal checkoutTotal | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	bookListTotal :=  	2* testObjectsFactory itemSellByTheStorePrice +  testObjectsFactory itemSellByTheStorePrice.
	
	inputInterface add: 2 of: testObjectsFactory itemSellByTheStore toCart: cartID.	
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
 	checkoutTotal := inputInterface checkoutCart: self anInvalidCartID 
		                                 usingCreditCard: testObjectsFactory notExpiredCreditCard 
		                                 ownedByClient: self aValidUserID 
		                                 expiring: testObjectsFactory today.
	
	self assert: bookListTotal equals: checkoutTotal.
			! !

!testRun: #InputInterfaceTest #test09CanCheckoutSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:55:53'!
ERROR!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 20:56:19' prior: 50663021!
test09CanCheckoutSucessfullyCreatedCart

	| inputInterface cartID bookList bookListTotal checkoutTotal | 
	
	inputInterface := self createInputInterface.
	
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	bookListTotal :=  	2* testObjectsFactory itemSellByTheStorePrice +  testObjectsFactory itemSellByTheStorePrice.
	
	inputInterface add: 2 of: testObjectsFactory itemSellByTheStore toCart: cartID.	
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
	
 	checkoutTotal := inputInterface checkoutCart: cartID 
		                                 usingCreditCard: testObjectsFactory notExpiredCreditCard 
		                                 ownedByClient: self aValidUserID 
		                                 expiring: testObjectsFactory today.
	
	self assert: bookListTotal equals: checkoutTotal.
			! !

!testRun: #InputInterfaceTest #test09CanCheckoutSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:56:20'!
ERROR!

!testRun: #InputInterfaceTest #test09CanCheckoutSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:56:42'!
ERROR!

!testRun: #InputInterfaceTest #test09CanCheckoutSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:56:56'!
ERROR!

!testRun: #InputInterfaceTest #test09CanCheckoutSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:57:10'!
ERROR!

aCart!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 20:57:53' prior: 50662999!
checkoutCart: cartID  usingCreditCard: creditCard ownedByClient: clientID expiring: aMonthOfYear
	
	| cashier |
	
	self assertValidCartId: cartID.
	
	cashier := Cashier toCheckout: (self cartAt: cartID)
	              charging: creditCard 
	              throught: merchantProcessor 
	              on: aMonthOfYear 
	              registeringOn: self.
	             
	
	^cashier checkOut.
	
	 ! !

!testRun: #InputInterfaceTest #test09CanCheckoutSucessfullyCreatedCart stamp: 'ght 11/7/2023 20:57:55'!
ERROR!

aMerchantProcessor!

anAmount!

aCreditCard!

TestCase subclass: #InputInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InputInterfaceTest category: 'TusLibros' stamp: 'ght 11/7/2023 21:23:45'!
TestCase subclass: #InputInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/7/2023 21:24:05'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !

TestCase subclass: #InputInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InputInterfaceTest category: 'TusLibros' stamp: 'ght 11/7/2023 21:24:30'!
TestCase subclass: #InputInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: InputInterfaceTest #debit:from: stamp: 'ght 11/7/2023 21:24:37'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 21:26:07' prior: 50663114!
checkoutCart: cartID  usingCreditCard: creditCard ownedByClient: clientID expiring: aMonthOfYear
	
	| cashier |
	
	self assertValidCartId: cartID.
	
	cashier := Cashier toCheckout: (self cartAt: cartID)
	              charging: creditCard 
	              throught: self 
	              on: aMonthOfYear 
	              registeringOn: self.
	             
	
	^cashier checkOut.
	
	 ! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 21:26:53'!
debitTotal

	"merchantProcessor debit: total from: creditCard."
	
	 ! !

!methodRemoval: InputInterface #debitTotal stamp: 'ght 11/7/2023 21:36:19'!
debitTotal

	"merchantProcessor debit: total from: creditCard."
	
	 !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/7/2023 21:37:00' prior: 50663172!
checkoutCart: cartID  usingCreditCard: creditCard ownedByClient: clientID expiring: aMonthOfYear
	
	| cashier |
	
	self assertValidCartId: cartID.
	
	cashier := Cashier toCheckout: (self cartAt: cartID)
	              charging: creditCard 
	              throught: merchantProcessor
	              on: aMonthOfYear 
	              registeringOn: self.
	             
	
	^cashier checkOut.
	
	 ! !

!testRun: #InputInterfaceTest #test09CanCheckoutSucessfullyCreatedCart stamp: 'ght 11/7/2023 21:37:43'!
ERROR!

----STARTUP---- (8 November 2023 11:13:33) as /home/gonztepl/Desktop/Inge1 Ubuntu Image/linux64/Ej9 It3/CuisUniversity-5981.image!


!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 11:14:06'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 11:14:06'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 11:14:06'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 11:14:06'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 11:14:06'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/8/2023 11:14:06'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/8/2023 11:14:06'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 11:14:06'!
PASSED!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 11:14:36'!
test08CannotCheckoutInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
	
	inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	self should: [ inputInterface listCart: self anInvalidCartID]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	
			! !

Object subclass: #InputInterface
	instanceVariableNames: 'catalog users merchantProcessor userForCartID cartForCartID currentID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InputInterface category: 'TusLibros' stamp: 'ght 11/8/2023 11:15:07'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalog users merchantProcessor userForCartID cartForCartID currentID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 11:26:29'!
checkoutCart: cartID with: creditCard for: clientID expiring: aMonthOfYear

	
	! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 11:28:15' prior: 50662395!
test08CannotCheckoutInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
	
	
	
	self should: [ inputInterface checkoutCart: self anInvalidCartID  
		                                     with: testObjectsFactory 
		                                     notExpiredCreditCard for:  self aValidUserID  
		                                     expiring: testObjectsFactory  today]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	 
			! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 11:28:57' prior: 50662427!
checkoutCart: cartID with: creditCard for: clientID expiring: aMonthOfYear

	self assertValidUserId: clientID
	
	! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 11:29:04' prior: 50662454!
checkoutCart: cartID with: creditCard for: clientID expiring: aMonthOfYear

	self assertValidUserId: clientID.
	
	
	
	! !

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 11:29:08'!
FAILURE!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 11:29:13'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 11:29:15'!
FAILURE!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 11:29:15'!
FAILURE!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 11:29:26' prior: 50662433!
test08CannotCheckoutInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
	
	
	
	self should: [ inputInterface checkoutCart: self anInvalidCartID  
		                                     with: testObjectsFactory 
		                                     notExpiredCreditCard for:  self anInvalidUserID  
		                                     expiring: testObjectsFactory  today]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	 
			! !

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 11:29:26'!
FAILURE!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 11:29:33'!
FAILURE!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 11:29:42'!
FAILURE!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 11:30:14' prior: 50662461!
checkoutCart: cartID with: creditCard for: clientID expiring: aMonthOfYear

	self assertValidCartId: cartID.
	
	
	
	! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 11:30:18' prior: 50662482!
test08CannotCheckoutInvalidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
	
	
	
	self should: [ inputInterface checkoutCart: self anInvalidCartID  
		                                     with: testObjectsFactory 
		                                     notExpiredCreditCard for:  self aValidUserID  
		                                     expiring: testObjectsFactory  today]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	 
			! !

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 11:30:18'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 11:30:18'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 11:30:18'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 11:30:18'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 11:30:18'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/8/2023 11:30:18'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/8/2023 11:30:18'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 11:30:18'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 11:30:18'!
PASSED!

----SNAPSHOT----(8 November 2023 11:30:27) CuisUniversity-5981.image priorSource: 10582669!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 11:31:35'!
test09CanCheckoutAValidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
	
	
	
	self should: [ inputInterface checkoutCart: self anInvalidCartID  
		                                     with: testObjectsFactory 
		                                     notExpiredCreditCard for:  self aValidUserID  
		                                     expiring: testObjectsFactory  today]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	 
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 11:31:38' prior: 50662576!
test09CanCheckoutAValidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
		
	
	self should: [ inputInterface checkoutCart: self anInvalidCartID  
		                                     with: testObjectsFactory 
		                                     notExpiredCreditCard for:  self aValidUserID  
		                                     expiring: testObjectsFactory  today]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	 
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 11:31:45' prior: 50662597!
test09CanCheckoutAValidCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
		
	self should: [ inputInterface checkoutCart: self anInvalidCartID  
		                                     with: testObjectsFactory 
		                                     notExpiredCreditCard for:  self aValidUserID  
		                                     expiring: testObjectsFactory  today]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	 
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 11:32:47' prior: 50662618!
test09CanCheckoutAValidCart

	| inputInterface cartID bookList | 
	
	inputInterface := self createInputInterface.	
		
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	inputInterface add: 2 of: testObjectsFactory itemSellByTheStore toCart: cartID.	
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 11:36:24' prior: 50662639!
test09CanCheckoutAValidCart

	| inputInterface cartID bookList totalBookList checkoutTotal | 
	
	inputInterface := self createInputInterface.	
		
	 cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
	
	bookList := OrderedCollection new.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore.
	bookList add: 	testObjectsFactory itemSellByTheStore2.
	inputInterface add: 2 of: testObjectsFactory itemSellByTheStore toCart: cartID.	
	inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID.
			
	totalBookList := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory itemSellByTheStorePrice2.
	
	checkoutTotal := inputInterface checkoutCart: cartID
	                                                   with: testObjectsFactory notExpiredCreditCard
	                                                   for: self aValidUserID 
	                                                   expiring: testObjectsFactory today.
	
	self assert: totalBookList equals: checkoutTotal.! !

Object subclass: #InputInterface
	instanceVariableNames: 'catalog users userForCartID cartForCartID currentID debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InputInterface category: 'TusLibros' stamp: 'ght 11/8/2023 11:38:00'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalog users userForCartID cartForCartID currentID debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

cashier!

cashier!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 11:45:14' prior: 50662514!
checkoutCart: cartID with: creditCard for: clientID expiring: aMonthOfYear

	| debitedAmount debitedCreditCard |
	
	self assertValidCartId: cartID.
	
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmount := anAmount.
		debitedCreditCard := aCreditCard ].
	
	
	! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 11:47:17' prior: 50662715!
checkoutCart: cartID with: creditCard for: clientID expiring: aMonthOfYear

	| debitedAmount debitedCreditCard cashier listPurchases |
	
	listPurchases := OrderedCollection new.
	
	self assertValidCartId: cartID.
	
	cashier:= Cashier 
		toCheckout: (self cartAt: cartID)
		charging: creditCard
		throught: self
		on: aMonthOfYear
		registeringOn: listPurchases.
	
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmount := anAmount.
		debitedCreditCard := aCreditCard ].
	
	
	
	
	! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 11:47:37' prior: 50662727!
checkoutCart: cartID with: creditCard for: clientID expiring: aMonthOfYear

	| debitedAmount debitedCreditCard cashier listPurchases |
	
	listPurchases := OrderedCollection new.
	
	self assertValidCartId: cartID.
	
	cashier:= Cashier 
		toCheckout: (self cartAt: cartID)
		charging: creditCard
		throught: self
		on: aMonthOfYear
		registeringOn: listPurchases.
	
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmount := anAmount.
		debitedCreditCard := aCreditCard ].
	
	^cashier checkOut.
	
	
	
	
	! !

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 11:47:41'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 11:47:41'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 11:47:41'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 11:47:41'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/8/2023 11:47:41'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/8/2023 11:47:41'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 11:47:41'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 11:47:41'!
PASSED!

!testRun: #InputInterfaceTest #test09CanCheckoutAValidCart stamp: 'ght 11/8/2023 11:47:41'!
ERROR!

!testRun: #InputInterfaceTest #test09CanCheckoutAValidCart stamp: 'ght 11/8/2023 11:47:41'!
ERROR!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 11:49:35'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard
	
	
	
	
	! !

testObjectsFactory itemSellByTheStorePrice!

testObjectsFactory itemSellByTheStorePrice2!

!testRun: #InputInterfaceTest #test09CanCheckoutAValidCart stamp: 'ght 11/8/2023 11:51:14'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 11:51:14'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 11:51:14'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 11:51:14'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 11:51:14'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/8/2023 11:51:14'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/8/2023 11:51:14'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 11:51:14'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 11:51:14'!
PASSED!

!testRun: #InputInterfaceTest #test09CanCheckoutAValidCart stamp: 'ght 11/8/2023 11:51:14'!
PASSED!

----SNAPSHOT----(8 November 2023 11:51:48) CuisUniversity-5981.image priorSource: 10589513!

----SNAPSHOT----(8 November 2023 11:52:43) CuisUniversity-5981.image priorSource: 10598124!

----SNAPSHOT----(8 November 2023 11:53:20) CuisUniversity-5981.image priorSource: 10598217!

----SNAPSHOT----(8 November 2023 12:12:50) CuisUniversity-5981.image priorSource: 10598310!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

!testRun: #InputInterfaceTest #test09CanCheckoutAValidCart stamp: 'ght 11/8/2023 12:12:53'!
PASSED!

----STARTUP---- (8 November 2023 14:38:32) as /home/gonztepl/Desktop/Inge1 Ubuntu Image/linux64/Ej9 It3/CuisUniversity-5981.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 14:38:40'!
PASSED!

!testRun: #InputInterfaceTest #test09CanCheckoutAValidCart stamp: 'ght 11/8/2023 14:38:40'!
PASSED!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 14:41:30'!
test10CannotAddItemToExpiredCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.
	
	inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
		
	self 
		should: [ inputInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart:  self anInvalidCartID ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface invalidCartIDError.]
			! !
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 14:42:15'!
expiredCartIDError

	^'Cannot operate with an expired cart'! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 14:43:52' prior: 50662935!
test10CannotAddItemToExpiredCart

	| inputInterface cartID| 
	
	inputInterface := self createInputInterface.
	
	cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
		
	self 
		should: [ inputInterface add: 1 of: testObjectsFactory itemSellByTheStore toCart:  self anInvalidCartID ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface invalidCartIDError.]
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 14:44:32' prior: 50662958!
test10CannotAddItemToExpiredCart

	| inputInterface cartID| 
	
	inputInterface := self createInputInterface.
	
	cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword.
		
	self 
		should: [ inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface expiredCartIDError.]
			! !

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 14:44:36'!
FAILURE!

Object subclass: #InputInterface
	instanceVariableNames: 'catalog users userForCartID cartForCartID currentID debitBehavior '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InputInterface category: 'TusLibros' stamp: 'ght 11/8/2023 14:45:49'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalog users userForCartID cartForCartID currentID debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #InputInterface
	instanceVariableNames: 'catalog users userForCartID cartForCartID debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InputInterface category: 'TusLibros' stamp: 'ght 11/8/2023 14:46:46'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalog users userForCartID cartForCartID debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 14:46:48'!
FAILURE!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 14:46:51'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 14:46:53'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 14:46:54'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 14:46:55'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/8/2023 14:46:57'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/8/2023 14:46:58'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 14:46:59'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 14:47:00'!
PASSED!

!testRun: #InputInterfaceTest #test09CanCheckoutAValidCart stamp: 'ght 11/8/2023 14:47:01'!
PASSED!

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 14:47:02'!
FAILURE!

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 14:47:02'!
FAILURE!

Object subclass: #InputInterface
	instanceVariableNames: 'catalog users currentID userForCartID cartForCartID debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InputInterface category: 'TusLibros' stamp: 'ght 11/8/2023 14:47:35'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalog users currentID userForCartID cartForCartID debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #InputInterface
	instanceVariableNames: 'catalog users currentID userForCartID cartForCartID debitBehavior lastTimeUsedForCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InputInterface category: 'TusLibros' stamp: 'ght 11/8/2023 14:48:06'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalog users currentID userForCartID cartForCartID debitBehavior lastTimeUsedForCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Clock
	instanceVariableNames: 'actualTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'ght 11/8/2023 14:54:22'!
Object subclass: #Clock
	instanceVariableNames: 'actualTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Time new!

DateAndTime new!
!Clock methodsFor: 'no messages' stamp: 'ght 11/8/2023 14:56:30' overrides: 16920235!
initialize
	
	actualTime := 'a'.! !
!Clock methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 14:56:50'!
actualDateAndTime

	^ actualTime! !

DateAndTime now!
!Clock methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 14:57:32' prior: 50663111 overrides: 16920235!
initialize
	
	actualTime := DateAndTime now.! !
!Clock methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 14:58:12'!
currentDateAndTime

	^ actualTime! !

!methodRemoval: Clock #actualDateAndTime stamp: 'ght 11/8/2023 14:58:14'!
actualDateAndTime

	^ actualTime!

!classDefinition: #Clock category: 'TusLibros' stamp: 'ght 11/8/2023 14:58:25'!
Object subclass: #Clock
	instanceVariableNames: 'actualTime currentDateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 14:58:24' prior: 50663125!
currentDateAndTime

	^ currentDateAndTime! !

Object subclass: #Clock
	instanceVariableNames: 'currentDateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'ght 11/8/2023 14:58:31'!
Object subclass: #Clock
	instanceVariableNames: 'currentDateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 14:58:39' prior: 50663121 overrides: 16920235!
initialize
	
	currentDateAndTime := DateAndTime now.! !
!InputInterface methodsFor: 'cart creation' stamp: 'ght 11/8/2023 15:05:09'!
createCartWithUserId: anUserId andPassword: aPassword at: currentTime
	
	|cart|
	
	self assertValidUserId: anUserId.
	self assertValidPassword: aPassword forUserId: anUserId.
	
	cart := self createCart.
	currentID := currentID + 1.
	cartForCartID at: currentID put: cart.
	userForCartID at: currentID put: anUserId.
	lastTimeUsedForCartID at: currentID put: currentTime 
	
	^currentID
	! !
!InputInterface methodsFor: 'cart creation' stamp: 'ght 11/8/2023 15:05:58' prior: 50657040!
createCartWithUserId: anUserId andPassword: aPassword
	
	self createCartWithUserId: anUserId andPassword: aPassword at: Clock new.
	! !
!InputInterface methodsFor: 'cart creation' stamp: 'ght 11/8/2023 15:07:39' prior: 50663178!
createCartWithUserId: anUserId andPassword: aPassword
	
	self createCartWithUserId: anUserId andPassword: aPassword at: Clock new currentDateAndTime.
	! !

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 15:07:47'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 15:07:49'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:07:50'!
ERROR!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:07:50'!
ERROR!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:07:57'!
ERROR!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:07:57'!
ERROR!
!InputInterface methodsFor: 'cart creation' stamp: 'ght 11/8/2023 15:08:08' prior: 50663186!
createCartWithUserId: anUserId andPassword: aPassword
	
	^self createCartWithUserId: anUserId andPassword: aPassword at: Clock new currentDateAndTime.
	! !

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 15:08:10'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 15:08:11'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 15:08:12'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 15:08:13'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 15:08:15'!
ERROR!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 15:08:15'!
ERROR!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:08:21'!
ERROR!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:08:21'!
ERROR!
!InputInterface methodsFor: 'cart creation' stamp: 'ght 11/8/2023 15:08:27' prior: 50663217!
createCartWithUserId: anUserId andPassword: aPassword
	
	self createCartWithUserId: anUserId andPassword: aPassword at: Clock new currentDateAndTime.
	! !

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 15:08:34'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 15:08:36'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:08:37'!
ERROR!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:08:37'!
ERROR!
!InputInterface methodsFor: 'cart creation' stamp: 'ght 11/8/2023 15:09:09' prior: 50663162!
createCartWithUserId: anUserId andPassword: aPassword at: currentTime
	
	|cart|
	
	self assertValidUserId: anUserId.
	self assertValidPassword: aPassword forUserId: anUserId.
	
	cart := self createCart.
	currentID := currentID + 1.
	cartForCartID at: currentID put: cart.
	userForCartID at: currentID put: anUserId.
	lastTimeUsedForCartID at: currentID put: currentTime.
	
	^currentID
	! !

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 15:09:13'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 15:09:15'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:09:16'!
FAILURE!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:09:16'!
FAILURE!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 15:09:23'!
ERROR!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 15:09:23'!
ERROR!
!InputInterface methodsFor: 'initialization' stamp: 'ght 11/8/2023 15:10:07' prior: 50657031!
initializeWith: aCatalog and: anUserList

	catalog := aCatalog.
	users := anUserList.
	currentID := 0.
	userForCartID := Dictionary new.
	cartForCartID := Dictionary new.
	lastTimeUsedForCartID = Dictionary new.! !

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:10:23'!
FAILURE!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:10:23'!
FAILURE!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 15:10:40'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 15:10:41'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:10:42'!
FAILURE!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:10:42'!
FAILURE!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:11:12'!
FAILURE!

cartForCartID!

userForCartID!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:12:45'!
FAILURE!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:13:36'!
FAILURE!
!InputInterface methodsFor: 'initialization' stamp: 'ght 11/8/2023 15:13:59' prior: 50663314!
initializeWith: aCatalog and: anUserList

	catalog := aCatalog.
	users := anUserList.
	currentID := 0.
	userForCartID := Dictionary new.
	cartForCartID := Dictionary new.
	lastTimeUsedForCartID := Dictionary new.! !

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:14:05'!
ERROR!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 15:14:31'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 15:14:32'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:14:33'!
ERROR!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:14:33'!
ERROR!
!InputInterface methodsFor: 'cart creation' stamp: 'ght 11/8/2023 15:15:09' prior: 50663254!
createCartWithUserId: anUserId andPassword: aPassword
	
	^self createCartWithUserId: anUserId andPassword: aPassword at: Clock new currentDateAndTime.
	! !

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:15:10'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:15:12'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 15:15:12'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 15:15:12'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:15:12'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 15:15:12'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/8/2023 15:15:12'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/8/2023 15:15:12'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 15:15:12'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 15:15:12'!
PASSED!

!testRun: #InputInterfaceTest #test09CanCheckoutAValidCart stamp: 'ght 11/8/2023 15:15:12'!
PASSED!

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 15:15:12'!
FAILURE!

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 15:15:12'!
FAILURE!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 15:16:07'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 15:16:09'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:16:10'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 15:16:11'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/8/2023 15:16:12'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/8/2023 15:16:14'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 15:16:16'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 15:16:17'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 15:16:18'!
PASSED!

!testRun: #InputInterfaceTest #test09CanCheckoutAValidCart stamp: 'ght 11/8/2023 15:16:20'!
PASSED!

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 15:16:22'!
FAILURE!

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 15:16:22'!
FAILURE!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 15:17:57' prior: 50662976!
test10CannotAddItemToExpiredCart

	| inputInterface cartID timeForCart | 
	
	inputInterface := self createInputInterface.
	
	timeForCart := Clock new.
	
	cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword at: timeForCart.
		
	self 
		should: [ inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface expiredCartIDError.]
			! !

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 15:22:15'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 15:22:15'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:22:15'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 15:22:15'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/8/2023 15:22:15'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/8/2023 15:22:15'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 15:22:15'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 15:22:15'!
PASSED!

!testRun: #InputInterfaceTest #test09CanCheckoutAValidCart stamp: 'ght 11/8/2023 15:22:15'!
PASSED!

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 15:22:15'!
FAILURE!

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 15:22:15'!
FAILURE!

time := DateAndTime now.!

time := time + 30 * minute!

Duration minutes: 30!

time := DateAndTime  new.!

time := time + Duration minutes: 30!

time := time + (Duration minutes: 30) !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 15:30:08' prior: 50663484!
test10CannotAddItemToExpiredCart

	| inputInterface cartID timeForCart | 
	
	inputInterface := self createInputInterface.
	
	timeForCart := Clock new.
	
	cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword at: timeForCart copy.
	
	timeForCart := timeForCart + (Duration minutes: 30).
		
	self 
		should: [ inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface expiredCartIDError.]
			! !
!Clock methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 15:31:28'!
increaseMinutes: anAmountOfMinutes

	^ currentDateAndTime + (Duration minutes: 30).! !
!Clock methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 15:31:33' prior: 50663568!
increaseMinutes: anAmountOfMinutes

	currentDateAndTime + (Duration minutes: 30).! !
!Clock methodsFor: 'as yet unclassified' stamp: 'ght 11/8/2023 15:31:44' prior: 50663574!
increaseMinutes: anAmountOfMinutes

	currentDateAndTime + (Duration minutes: anAmountOfMinutes).! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 15:31:51' prior: 50663547!
test10CannotAddItemToExpiredCart

	| inputInterface cartID timeForCart | 
	
	inputInterface := self createInputInterface.
	
	timeForCart := Clock new.
	
	cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword at: timeForCart copy.
	
	timeForCart increaseMinutes: 30.
		
	self 
		should: [ inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface expiredCartIDError.]
			! !
!InputInterface methodsFor: 'adding' stamp: 'ght 11/8/2023 15:33:08'!
add: aQuantity of: aBook toCart: cartID at: currentTime

	| cart |
	
	self assertValidCartId: cartID.
	cart := cartForCartID at: cartID.
	
	cart add: aQuantity of: aBook .
! !
!InputInterface methodsFor: 'adding' stamp: 'ght 11/8/2023 15:34:06' prior: 50658336!
add: aQuantity of: aBook toCart: cartID 

	| cart |
	
	^self add: aQuantity of: aBook toCart: cartID at: Clock new currentDateAndTime.

! !
!InputInterface methodsFor: 'adding' stamp: 'ght 11/8/2023 15:34:11' prior: 50663615!
add: aQuantity of: aBook toCart: cartID 
	
	^self add: aQuantity of: aBook toCart: cartID at: Clock new currentDateAndTime.

! !
!InputInterface methodsFor: 'adding' stamp: 'ght 11/8/2023 15:37:00' prior: 50663606!
add: aQuantity of: aBook toCart: cartID at: currentTime

	| cart |
	
	self assertValidCartId: cartID.
	
	((Duration minutes: 30) < (currentTime  - (lastTimeUsedForCartID at: cartID))) ifTrue: [^self error: self class expiredCartIDError].
	
	cart := cartForCartID at: cartID.
	
	cart add: aQuantity of: aBook .
! !

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 15:37:15'!
ERROR!

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 15:37:15'!
ERROR!
!InputInterface methodsFor: 'adding' stamp: 'ght 11/8/2023 15:38:25' prior: 50663623!
add: aQuantity of: aBook toCart: cartID 
	
	^self add: aQuantity of: aBook toCart: cartID at: DateAndTime now.

! !
!InputInterface methodsFor: 'cart creation' stamp: 'ght 11/8/2023 15:38:37' prior: 50663389!
createCartWithUserId: anUserId andPassword: aPassword
	
	^self createCartWithUserId: anUserId andPassword: aPassword at: DateAndTime now.
	! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 15:40:09'!
currentDateAndTime

	^ DateAndTime now! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 15:40:49' prior: 50663586!
test10CannotAddItemToExpiredCart

	| inputInterface cartID timeForCart | 
	
	inputInterface := self createInputInterface.
	
	timeForCart := self currentDateAndTime.
	
	cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword at: timeForCart copy.
	
	timeForCart increaseMinutes: 30.
		
	self 
		should: [ inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface expiredCartIDError.]
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 15:42:50' prior: 50663669!
test10CannotAddItemToExpiredCart

	| inputInterface cartID timeForCart | 
	
	inputInterface := self createInputInterface.
	
	timeForCart := self currentDateAndTime.
	
	cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword at: timeForCart copy.
	
	timeForCart :=  timeForCart+ (Duration minutes: 30).
		
	self 
		should: [ inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface expiredCartIDError.]
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 15:42:53' prior: 50663690!
test10CannotAddItemToExpiredCart

	| inputInterface cartID timeForCart | 
	
	inputInterface := self createInputInterface.
	
	timeForCart := self currentDateAndTime.
	
	cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword at: timeForCart copy.
	
	timeForCart :=  timeForCart + (Duration minutes: 30).
		
	self 
		should: [ inputInterface add: testObjectsFactory itemSellByTheStore2 toCart: cartID. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface expiredCartIDError.]
			! !

!classRemoval: #Clock stamp: 'ght 11/8/2023 15:43:21'!
Object subclass: #Clock
	instanceVariableNames: 'currentDateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 15:43:29'!
FAILURE!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 15:44:43' prior: 50663712!
test10CannotAddItemToExpiredCart

	| inputInterface cartID timeForCart timeForCartExpired| 
	
	inputInterface := self createInputInterface.
	
	timeForCart := self currentDateAndTime.
	
	cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword at: timeForCart copy.
	
	timeForCartExpired :=  timeForCart + (Duration minutes: 30).
		
	self 
		should: [ inputInterface add: 1 of: testObjectsFactory itemSellByTheStore2 toCart: cartID at: timeForCartExpired. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface expiredCartIDError.]
			! !
!InputInterface methodsFor: 'adding' stamp: 'ght 11/8/2023 15:45:10' prior: 50663630!
add: aQuantity of: aBook toCart: cartID at: currentTime

	| cart |
	
	self assertValidCartId: cartID.
	
	((Duration minutes: 30) < (currentTime  - (lastTimeUsedForCartID at: cartID))) ifTrue: [^self error: self class expiredCartIDError].
	
	cart := cartForCartID at: cartID.
	
	cart add: aQuantity of: aBook .
! !

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 15:45:12'!
FAILURE!

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 15:45:53'!
FAILURE!
!InputInterface methodsFor: 'adding' stamp: 'ght 11/8/2023 15:46:30' prior: 50663766!
add: aQuantity of: aBook toCart: cartID at: currentTime

	| cart |
	
	self assertValidCartId: cartID.
	
	((Duration minutes: 30) <= (currentTime  - (lastTimeUsedForCartID at: cartID))) ifTrue: [^self error: self class expiredCartIDError].
	
	cart := cartForCartID at: cartID.
	
	cart add: aQuantity of: aBook .
! !

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 15:46:51'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 15:46:51'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 15:46:51'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:46:51'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 15:46:51'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/8/2023 15:46:51'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/8/2023 15:46:51'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 15:46:51'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 15:46:51'!
PASSED!

!testRun: #InputInterfaceTest #test09CanCheckoutAValidCart stamp: 'ght 11/8/2023 15:46:51'!
PASSED!

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 15:46:51'!
PASSED!
!InputInterface methodsFor: 'adding' stamp: 'ght 11/8/2023 15:48:02'!
assertNonExpiredCartFor: cartID at: currentTime
	
	^((Duration minutes: 30) <= (currentTime  - (lastTimeUsedForCartID at: cartID))) ifTrue: [^self error: self class expiredCartIDError].
	
	! !
!InputInterface methodsFor: 'adding' stamp: 'ght 11/8/2023 15:49:11'!
lastTimeUsedFor: cartID

	^ lastTimeUsedForCartID at: cartID! !
!InputInterface methodsFor: 'adding' stamp: 'ght 11/8/2023 15:49:11' prior: 50663786!
add: aQuantity of: aBook toCart: cartID at: currentTime

	| cart |
	
	self assertValidCartId: cartID.
	
	((Duration minutes: 30) <= (currentTime  - (self lastTimeUsedFor: cartID))) ifTrue: [^self error: self class expiredCartIDError].
	
	cart := cartForCartID at: cartID.
	
	cart add: aQuantity of: aBook .
! !
!InputInterface methodsFor: 'adding' stamp: 'ght 11/8/2023 15:49:11' prior: 50663836!
assertNonExpiredCartFor: cartID at: currentTime
	
	^((Duration minutes: 30) <= (currentTime  - (self lastTimeUsedFor: cartID))) ifTrue: [^self error: self class expiredCartIDError].
	
	! !
!InputInterface methodsFor: 'adding' stamp: 'ght 11/8/2023 15:49:43' prior: 50663850!
add: aQuantity of: aBook toCart: cartID at: currentTime

	| cart |
	
	self assertValidCartId: cartID.
	
	self assertNonExpiredCartFor: cartID at: currentTime.
	
	cart := cartForCartID at: cartID.
	
	cart add: aQuantity of: aBook .
! !

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 15:49:45'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 15:49:45'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 15:49:45'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:49:45'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 15:49:45'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/8/2023 15:49:45'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/8/2023 15:49:45'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 15:49:45'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 15:49:45'!
PASSED!

!testRun: #InputInterfaceTest #test09CanCheckoutAValidCart stamp: 'ght 11/8/2023 15:49:45'!
PASSED!

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 15:49:45'!
PASSED!

----SNAPSHOT----(8 November 2023 15:50:02) CuisUniversity-5981.image priorSource: 10598403!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 15:51:52'!
test11CannotListItemsForExpiredCart

	| inputInterface cartID timeForCart timeForCartExpired | 
	
	inputInterface := self createInputInterface.
	
	timeForCart := self currentDateAndTime.
	
	cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword at: timeForCart copy.
	
	timeForCartExpired :=  timeForCart + (Duration minutes: 30).
		
	self 
		should: [ inputInterface add: 1 of: testObjectsFactory itemSellByTheStore2 toCart: cartID at: timeForCartExpired. ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = InputInterface expiredCartIDError.]
			! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 15:53:13' prior: 50663923!
test11CannotListItemsForExpiredCart

	| inputInterface cartID timeForCart timeForCartExpired | 
	
	inputInterface := self createInputInterface.
	
	timeForCart := self currentDateAndTime.
	
	cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword at: timeForCart copy.
	
	timeForCartExpired :=  timeForCart + (Duration minutes: 30).
		
	self should: [ inputInterface listCart: cartID at: timeForCartExpired]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface expiredCartIDError].	
		! !

!testRun: #InputInterfaceTest #test11CannotListItemsForExpiredCart stamp: 'ght 11/8/2023 15:53:15'!
ERROR!
!InputInterface methodsFor: 'queries' stamp: 'ght 11/8/2023 15:54:00'!
listCart: cartID at: currentTime
	
	self assertValidCartId: cartID.
	
	self assertNonExpiredCartFor: cartID at: currentTime.
	
	^self itemsFor: (cartForCartID at: cartID).! !
!InputInterface methodsFor: 'queries' stamp: 'ght 11/8/2023 15:55:03' prior: 50662186!
listCart: cartID 
	
	^self listCart: cartID at: DateAndTime now.! !

!testRun: #InputInterfaceTest #test11CannotListItemsForExpiredCart stamp: 'ght 11/8/2023 15:55:11'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 15:55:11'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 15:55:11'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 15:55:11'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 15:55:11'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/8/2023 15:55:11'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/8/2023 15:55:11'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 15:55:11'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 15:55:11'!
PASSED!

!testRun: #InputInterfaceTest #test09CanCheckoutAValidCart stamp: 'ght 11/8/2023 15:55:11'!
PASSED!

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 15:55:11'!
PASSED!

!testRun: #InputInterfaceTest #test11CannotListItemsForExpiredCart stamp: 'ght 11/8/2023 15:55:11'!
PASSED!

----SNAPSHOT----(8 November 2023 15:55:18) CuisUniversity-5981.image priorSource: 10632615!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 15:59:11'!
test12CannotCheckoutAnExpiredCart

	| inputInterface | 
	
	inputInterface := self createInputInterface.	
	
	
	
	self should: [ inputInterface checkoutCart: self anInvalidCartID  
		                                     with: testObjectsFactory 
		                                     notExpiredCreditCard for:  self aValidUserID  
		                                     expiring: testObjectsFactory  today]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	 
			! !
!InputInterface methodsFor: 'checkout' stamp: 'ght 11/8/2023 16:00:00'!
checkoutCart: cartID with: creditCard for: clientID expiring: aMonthOfYear at: currentTime

	| debitedAmount debitedCreditCard cashier listPurchases |
	
	listPurchases := OrderedCollection new.
	
	self assertValidCartId: cartID.
	
	self assertNonExpiredCartFor: cartID at: currentTime.
	
	cashier:= Cashier 
		toCheckout: (self cartAt: cartID)
		charging: creditCard
		throught: self
		on: aMonthOfYear
		registeringOn: listPurchases.
	
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmount := anAmount.
		debitedCreditCard := aCreditCard ].
	
	^cashier checkOut.
	
	
	
	
	! !
!InputInterface methodsFor: 'checkout' stamp: 'ght 11/8/2023 16:00:33' prior: 50662746!
checkoutCart: cartID with: creditCard for: clientID expiring: aMonthOfYear

	^self checkoutCart: cartID with: creditCard for: clientID expiring: aMonthOfYear at: DateAndTime now.! !
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 16:02:29' prior: 50664030!
test12CannotCheckoutAnExpiredCart

	| inputInterface cartID timeForCart timeForCartExpired | 
	
	inputInterface := self createInputInterface.	
	
	timeForCart := self currentDateAndTime.
	
	cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword at: timeForCart copy.
	
	timeForCartExpired :=  timeForCart + (Duration minutes: 30).	
	
	self should: [ inputInterface checkoutCart: cartID 
		                                     with: testObjectsFactory 
		                                     notExpiredCreditCard for:  self aValidUserID  
		                                     expiring: testObjectsFactory  today
						     at: timeForCartExpired]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface invalidCartIDError].	
	
	 
			! !

!testRun: #InputInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'ght 11/8/2023 16:02:31'!
FAILURE!

!testRun: #InputInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'ght 11/8/2023 16:03:01'!
FAILURE!

!testRun: #InputInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'ght 11/8/2023 16:03:20'!
FAILURE!

!testRun: #InputInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'ght 11/8/2023 16:03:28'!
FAILURE!
!InputInterfaceTest methodsFor: 'tests' stamp: 'ght 11/8/2023 16:03:42' prior: 50664082!
test12CannotCheckoutAnExpiredCart

	| inputInterface cartID timeForCart timeForCartExpired | 
	
	inputInterface := self createInputInterface.	
	
	timeForCart := self currentDateAndTime.
	
	cartID := inputInterface createCartWithUserId: self aValidUserID andPassword: self aValidPassword at: timeForCart copy.
	
	timeForCartExpired :=  timeForCart + (Duration minutes: 30).	
	
	self should: [ inputInterface checkoutCart: cartID 
		                                     with: testObjectsFactory 
		                                     notExpiredCreditCard for:  self aValidUserID  
		                                     expiring: testObjectsFactory  today
						     at: timeForCartExpired]
	      raise: Error - MessageNotUnderstood 
	      withExceptionDo: [ :anError |
				self assert: anError messageText = InputInterface expiredCartIDError ].	
	
	 
			! !

!testRun: #InputInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'ght 11/8/2023 16:03:43'!
PASSED!

!testRun: #InputInterfaceTest #test01CannotCreateCartWithAnInvalidUserID stamp: 'ght 11/8/2023 16:03:43'!
PASSED!

!testRun: #InputInterfaceTest #test02CannotCreateCartWithAnInvalidPassword stamp: 'ght 11/8/2023 16:03:43'!
PASSED!

!testRun: #InputInterfaceTest #test03CartIsCreatedSuccesfullyWhenUsingValidClient stamp: 'ght 11/8/2023 16:03:43'!
PASSED!

!testRun: #InputInterfaceTest #test04CannotAddItemToInvalidCart stamp: 'ght 11/8/2023 16:03:43'!
PASSED!

!testRun: #InputInterfaceTest #test05AnItemCanBeAddedToValidCart stamp: 'ght 11/8/2023 16:03:43'!
PASSED!

!testRun: #InputInterfaceTest #test06CannotListItemsForInvalidCart stamp: 'ght 11/8/2023 16:03:43'!
PASSED!

!testRun: #InputInterfaceTest #test07CanListItemsForSucessfullyCreatedCart stamp: 'ght 11/8/2023 16:03:43'!
PASSED!

!testRun: #InputInterfaceTest #test08CannotCheckoutInvalidCart stamp: 'ght 11/8/2023 16:03:43'!
PASSED!

!testRun: #InputInterfaceTest #test09CanCheckoutAValidCart stamp: 'ght 11/8/2023 16:03:43'!
PASSED!

!testRun: #InputInterfaceTest #test10CannotAddItemToExpiredCart stamp: 'ght 11/8/2023 16:03:43'!
PASSED!

!testRun: #InputInterfaceTest #test11CannotListItemsForExpiredCart stamp: 'ght 11/8/2023 16:03:43'!
PASSED!

!testRun: #InputInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'ght 11/8/2023 16:03:43'!
PASSED!

----SNAPSHOT----(8 November 2023 16:03:51) CuisUniversity-5981.image priorSource: 10636048!

----SNAPSHOT----(8 November 2023 16:04:01) CuisUniversity-5981.image priorSource: 10641585!